{"total":37,"pageSize":10,"pageCount":4,"data":[{"author":"Irony","title":"PyQtClient例子客户端","slug":"pyqtclient","date":"2019-02-02 15:15:06","updated":"2019-10-21T14:49:45.391Z","comments":null,"path":"api/articles/pyqtclient.json","excerpt":" [图片] ","keywords":null,"cover":"images/1_thumb.jpg","categories":[{"name":"随笔","path":"api/categories/随笔.json"}],"tags":[{"name":"PyQt","path":"api/tags/PyQt.json"}]},{"author":"Irony","title":"FFmpeg合成加密HLS记录","slug":"ffmpeghls","date":"2019-01-12 19:28:06","updated":"2019-10-21T14:49:45.387Z","comments":null,"path":"api/articles/ffmpeghls.json","excerpt":"记录在某个需求中要求截图并合成加密视频文件，这里采用FFmpeg的管道流来实现生成HLS加密文件。<br>","keywords":null,"cover":"images/default_thumb.jpg","categories":[{"name":"笔记","path":"api/categories/笔记.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"},{"name":"FFmpeg","path":"api/tags/FFmpeg.json"},{"name":"HLS","path":"api/tags/HLS.json"}]},{"author":"Irony","title":"PyQt5编译QWebView与QWebEngineView共存","slug":"webviewnew","date":"2019-01-12 19:28:06","updated":"2019-10-21T14:49:45.391Z","comments":null,"path":"api/articles/webviewnew.json","excerpt":"在PyQt5.5过后移除了QWebView控件，改用QWebEngineView，但是这个刚开始用起来不是很方便，最近在整理一些例子的时候需要同时使用QWebView和QWebEngineView，故希望把QWebView重新加入到后面的PyQt5版本中，查看PyQt5.10.1的源码发现里面其实是有QWebView的，只是因为Qt5.10.1中没有编译好的dll等导致无法编译。<br>","keywords":null,"cover":"images/default_thumb.jpg","categories":[{"name":"教程","path":"api/categories/教程.json"}],"tags":[{"name":"PyQt","path":"api/tags/PyQt.json"},{"name":"QWebView","path":"api/tags/QWebView.json"},{"name":"浏览器","path":"api/tags/浏览器.json"}]},{"author":"Irony","title":"PyQt5之图片轮播","slug":"pageswitching","date":"2018-11-24 21:45:06","updated":"2019-10-21T14:49:45.387Z","comments":null,"path":"api/articles/pageswitching.json","excerpt":"之前看到了QStackedWidget做切换动画，让界面不那么生硬，于是参考了 http://qt.shoutwiki.com/wiki/Extending_QStackedWidget_for_sliding_page_animations_in_Qt 做了一个QStackedWidget的切换动画，然后利用QStackedWidget结合多个QLabel显示图片来做一个轮播效果。其实在写之前也在网上找了很多例子，参看过后发现大多例子都是利用到了paintEvent去绘制，这样其实还是比较麻烦，个人觉得更好的方式是使用QPropertyAnimation属性动画修改控件中QLabel图片控件的pos位置属性就可以达到移动效果了。<br>","keywords":null,"cover":"images/PageSwitching_thumb.jpg","categories":[{"name":"例子","path":"api/categories/例子.json"}],"tags":[{"name":"PyQt","path":"api/tags/PyQt.json"},{"name":"动画","path":"api/tags/动画.json"},{"name":"轮播","path":"api/tags/轮播.json"}]},{"author":"不许人间见白头","title":"python 在类里使用进程池","slug":"processinclass","date":"2018-11-16 21:37:31","updated":"2019-10-21T14:49:45.387Z","comments":null,"path":"api/articles/processinclass.json","excerpt":"首先， 进程池的作用就是减少进程的创建和释放 开销的， 所以在类中作为局部变量是不合适的; 其次， 进程池必须在if __name__ == &quot;__main__&quot;里 ，否则会报 frozen_ 什么什么的错误;（这一点可能解释有误）;","keywords":null,"cover":"images/processinclass1_thumb.jpg","categories":[{"name":"笔记","path":"api/categories/笔记.json"}],"tags":[{"name":"进程","path":"api/tags/进程.json"}]},{"author":"Irony","title":"PyQt5之QSlider滑动条点击定位","slug":"jumpslider","date":"2018-11-05 23:12:26","updated":"2019-10-21T14:49:45.387Z","comments":null,"path":"api/articles/jumpslider.json","excerpt":"QSlider 在通常情况下支持鼠标点击可以任意拖动，或者鼠标点击则往鼠标点击的方向移动一小格，这种移动一小格通常情况下用起来很不方便，比如我要做一个播放器的播放进度条，肯定是点击某个位置就直接跳到该位置，为此需要对 QSlider 的鼠标事件mousePressEvent进行重写。<br>","keywords":null,"cover":"images/ClickJumpSlider_thumb.jpg","categories":[{"name":"例子","path":"api/categories/例子.json"}],"tags":[{"name":"PyQt","path":"api/tags/PyQt.json"},{"name":"滑动条","path":"api/tags/滑动条.json"}]},{"author":"Irony","title":"PyQt5仿网页鼠标移动点阵特效","slug":"rlatticeeffect","date":"2018-10-29 16:49:10","updated":"2019-10-21T14:49:45.391Z","comments":null,"path":"api/articles/rlatticeeffect.json","excerpt":"Orz，前段时间有个zz需求，就是要做一个类似网页上很多个多点连线、鼠标移动跟随的那种炫酷特效，然后花了点时间在网上找了js做的，刚开始打算是嵌入QWebView来显示网页，后来研究了下js的算法代码，遂改用QWidget的paintEvent直接绘制。<br>","keywords":null,"cover":"images/RlatticeEffect_thumb.jpg","categories":[{"name":"例子","path":"api/categories/例子.json"}],"tags":[{"name":"PyQt","path":"api/tags/PyQt.json"},{"name":"动画","path":"api/tags/动画.json"},{"name":"特效","path":"api/tags/特效.json"}]},{"author":"不许人间见白头","title":"QDataWidgetMapper 数据库绑定 QLineEdit控件","slug":"datawidgetmapper","date":"2018-10-29 16:17:59","updated":"2019-10-21T14:49:45.387Z","comments":null,"path":"api/articles/datawidgetmapper.json","excerpt":"qt为操作数据库提供了一个model+view的模式 , 这样简单的出入库逻辑就不需要自己编写。QDataWidgetMapper 可以 将数据库的数据 映射到其他控件 。注意: 表格里的数据修改 还没有提交到数据库 , 需要点击提交按钮才生效。<br>","keywords":null,"cover":"images/datawidgetmapper_thumb.jpg","categories":[{"name":"例子","path":"api/categories/例子.json"}],"tags":[{"name":"PyQt","path":"api/tags/PyQt.json"},{"name":"Model","path":"api/tags/Model.json"}]},{"author":"Irony","title":"PyQt5显示.9格式的PNG图片","slug":"qtninepatch","date":"2018-10-26 10:00:08","updated":"2019-10-21T14:49:45.391Z","comments":null,"path":"api/articles/qtninepatch.json","excerpt":"做过安卓开发的和使用过QQ的都知道.9.png这种图片格式，效果就如QQ的聊天气泡一样可以拉伸，这种格式的图片允许开发人员定义可扩展区域，当需要延伸图片以填充比图片本身更大区域时，可扩展区的内容被延展；允许开发人员定义内容显示区，用于显示文字或其他内容。目前在Github上有两个C++版本的，在这里我把它们都用Python实现了一遍。另外一个我也为PyQt提供了编译好的pyd文件。<br>","keywords":null,"cover":"images/NinePatchImage_thumb.jpg","categories":[{"name":"例子","path":"api/categories/例子.json"}],"tags":[{"name":"PyQt","path":"api/tags/PyQt.json"},{"name":"图片","path":"api/tags/图片.json"},{"name":"气泡","path":"api/tags/气泡.json"},{"name":".9png","path":"api/tags/.9png.json"}]},{"author":"Irony","title":"PyQt5菜单之多选功能","slug":"mselectmenu","date":"2018-10-25 09:53:34","updated":"2019-10-21T14:49:45.387Z","comments":null,"path":"api/articles/mselectmenu.json","excerpt":"有时候会遇到这种需求：在界面某个位置弹出一个菜单，其中里面的菜单项可以多选（类似配置选项），此时用QMenu会遇到点击一个菜单项就会自动关闭，当然可以通过其他方式实现该功能，不过这里就采用QMenu通过特殊的方式来实现该需求。<br>","keywords":null,"cover":"images/MultiSelect_thumb.jpg","categories":[{"name":"例子","path":"api/categories/例子.json"}],"tags":[{"name":"PyQt","path":"api/tags/PyQt.json"},{"name":"菜单","path":"api/tags/菜单.json"}]}]}