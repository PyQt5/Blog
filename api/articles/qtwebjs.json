{"author":"Irony","title":"QtWebkit和QWebEngineView与Javascript交互","slug":"qtwebjs","date":"2019-05-22 11:30:36","updated":"2019-10-21T10:33:54.088Z","comments":true,"path":"api/articles/qtwebjs.json","url":"https://pyqt5.com/qtwebjs.html","excerpt":"以前还是QWebView的时候和Javascript交互起来很方便，但是到了Qt5.6以后改用了QWebEngineView，并通过其提供的qwebchannel.js来进行交互。可能是由于刚出来的原因，这玩意儿有个bug就是必须在每次加载页面的时候手动注入，跳转页面后就失效了，需要手动注入，目前有没有修复具体未测试。这里对QWebView和QWebEngineView与Js交互都做了一个示例。<br>","covers":["https://github.com/PyQt5/PyQt/raw/master/QWebEngineView/ScreenShot/JsSignals.gif"],"content":"<p>以前还是<code>QWebView</code>的时候和<code>Javascript</code>交互起来很方便，但是到了Qt5.6以后改用了<code>QWebEngineView</code>，并通过其提供的<code>qwebchannel.js</code>来进行交互。可能是由于刚出来的原因，这玩意儿有个bug就是必须在每次加载页面的时候手动注入，跳转页面后就失效了，需要手动注入，目前有没有修复具体未测试。这里对<code>QWebView</code>和<code>QWebEngineView</code>与Js交互都做了一个示例。<br><a id=\"more\"></a></p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><ol>\n<li>针对<code>QWebView</code>通过<code>QWebFrame</code>的<code>addToJavaScriptWindowObject</code>把对象传递到<code>Javascript</code>中</li>\n<li>针对<code>QWebEngineView</code>通过<code>QWebChannel.registerObject(&#39;Bridge&#39;, QObject)</code>把对象传递到<code>Javascript</code>中</li>\n<li>可以通过<code>@pyqtSlot</code>装饰器来申明该方法可以暴露给<code>Javascript</code>调用</li>\n</ol>\n<pre><code class=\"python\">@pyqtSlot(str)\ndef callFromJs(self, text):\n    QMessageBox.information(self, &quot;提示&quot;, &quot;来自js调用：{}&quot;.format(text))\n</code></pre>\n<ol start=\"4\">\n<li>针对<code>QWebView</code>在<code>Javascript</code>中获取该对象，可以通过该对象对窗口属性以及信号和暴露出的方法进行调用</li>\n</ol>\n<pre><code class=\"javascript\">// 这里绑定窗口的标题变化信号（这个信号是由QWidget内部的）\nBridge.windowTitleChanged.connect({fun: function(title) {\n    showLog(&quot;标题被修改为：&quot; + title);\n}}, &quot;fun&quot;);\n\n// 绑定自定义的信号customSignal\nBridge.customSignal.connect({fun: function(text) {\n    showLog(&quot;收到自定义信号内容：&quot; + text);\n}}, &quot;fun&quot;);\n</code></pre>\n<ol start=\"5\">\n<li>针对<code>QWebEngineView</code>在<code>Javascript</code>中获取该对象，可以通过该对象对窗口属性以及信号和暴露出的方法进行调用</li>\n</ol>\n<pre><code class=\"javascript\">new QWebChannel(qt.webChannelTransport,\n    function(channel) {\n        window.Bridge = channel.objects.Bridge;\n\n        // 这里绑定窗口的标题变化信号（这个信号是由QWidget内部的）\n        Bridge.windowTitleChanged.connect(function(title) {\n            showLog(&quot;标题被修改为：&quot; + title);\n        });\n\n        // 绑定自定义的信号customSignal\n        Bridge.customSignal.connect(function(text) {\n           showLog(&quot;收到自定义信号内容：&quot; + text);\n        });\n    }\n);\n</code></pre>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p><code>QWebView</code>： <a href=\"https://github.com/PyQt5/PyQt/blob/master/QWebView/JsSignals.py\" target=\"_blank\" rel=\"noopener\">https://github.com/PyQt5/PyQt/blob/master/QWebView/JsSignals.py</a></p>\n<p><code>QWebEngineView</code>： <a href=\"https://github.com/PyQt5/PyQt/blob/master/QWebEngineView/JsSignals.py\" target=\"_blank\" rel=\"noopener\">https://github.com/PyQt5/PyQt/blob/master/QWebEngineView/JsSignals.py</a></p>\n<ol>\n<li>针对<code>QWebView</code>的核心实现</li>\n</ol>\n<pre><code class=\"python\">class WebView(QWebView):\n\n    customSignal = pyqtSignal(str)\n\n    def __init__(self, *args, **kwargs):\n        super(WebView, self).__init__(*args, **kwargs)\n        self.initSettings()\n        # 暴露接口对象\n        self.page().mainFrame().javaScriptWindowObjectCleared.connect(self._exposeInterface)\n\n    def _exposeInterface(self):\n        &quot;&quot;&quot;向Js暴露调用本地方法接口\n        &quot;&quot;&quot;\n        self.page().mainFrame().addToJavaScriptWindowObject(&#39;Bridge&#39;, self)\n\n    # 注意pyqtSlot用于把该函数暴露给js可以调用\n    @pyqtSlot(str)\n    def callFromJs(self, text):\n        QMessageBox.information(self, &quot;提示&quot;, &quot;来自js调用：{}&quot;.format(text))\n\n    def sendCustomSignal(self):\n        # 发送自定义信号\n        self.customSignal.emit(&#39;当前时间: &#39; + str(time()))\n</code></pre>\n<ol start=\"2\">\n<li>针对<code>QWebEngineView</code>的核心实现</li>\n</ol>\n<pre><code class=\"python\">class WebEngineView(QWebEngineView):\n\n    customSignal = pyqtSignal(str)\n\n    def __init__(self, *args, **kwargs):\n        super(WebEngineView, self).__init__(*args, **kwargs)\n        self.channel = QWebChannel(self)\n        # 把自身对象传递进去\n        self.channel.registerObject(&#39;Bridge&#39;, self)\n        # 设置交互接口\n        self.page().setWebChannel(self.channel)\n\n    # 注意pyqtSlot用于把该函数暴露给js可以调用\n    @pyqtSlot(str)\n    def callFromJs(self, text):\n        QMessageBox.information(self, &quot;提示&quot;, &quot;来自js调用：{}&quot;.format(text))\n\n    def sendCustomSignal(self):\n        # 发送自定义信号\n        self.customSignal.emit(&#39;当前时间: &#39; + str(time()))\n</code></pre>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"https://github.com/PyQt5/PyQt/raw/master/QWebEngineView/ScreenShot/JsSignals.gif\" alt=\"JsSignals\"></p>\n","raw":"---\nauthor: Irony\ntitle: QtWebkit和QWebEngineView与Javascript交互\ndate: 2019-05-22 11:30:36\ntop: 1\ntags: \n - PyQt\n - QWebView\n - QWebEngineView\n - 浏览器\ncategories: 例子\n---\n\n以前还是`QWebView`的时候和`Javascript`交互起来很方便，但是到了Qt5.6以后改用了`QWebEngineView`，并通过其提供的`qwebchannel.js`来进行交互。可能是由于刚出来的原因，这玩意儿有个bug就是必须在每次加载页面的时候手动注入，跳转页面后就失效了，需要手动注入，目前有没有修复具体未测试。这里对`QWebView`和`QWebEngineView`与Js交互都做了一个示例。\n<!-- more -->\n\n## 说明\n\n1. 针对`QWebView`通过`QWebFrame`的`addToJavaScriptWindowObject`把对象传递到`Javascript`中\n2. 针对`QWebEngineView`通过`QWebChannel.registerObject('Bridge', QObject)`把对象传递到`Javascript`中\n3. 可以通过`@pyqtSlot`装饰器来申明该方法可以暴露给`Javascript`调用\n\n```python\n@pyqtSlot(str)\ndef callFromJs(self, text):\n    QMessageBox.information(self, \"提示\", \"来自js调用：{}\".format(text))\n```\n\n4. 针对`QWebView`在`Javascript`中获取该对象，可以通过该对象对窗口属性以及信号和暴露出的方法进行调用\n\n```javascript\n// 这里绑定窗口的标题变化信号（这个信号是由QWidget内部的）\nBridge.windowTitleChanged.connect({fun: function(title) {\n    showLog(\"标题被修改为：\" + title);\n}}, \"fun\");\n\n// 绑定自定义的信号customSignal\nBridge.customSignal.connect({fun: function(text) {\n    showLog(\"收到自定义信号内容：\" + text);\n}}, \"fun\");\n```\n\n5. 针对`QWebEngineView`在`Javascript`中获取该对象，可以通过该对象对窗口属性以及信号和暴露出的方法进行调用\n\n```javascript\nnew QWebChannel(qt.webChannelTransport,\n    function(channel) {\n        window.Bridge = channel.objects.Bridge;\n        \n        // 这里绑定窗口的标题变化信号（这个信号是由QWidget内部的）\n        Bridge.windowTitleChanged.connect(function(title) {\n            showLog(\"标题被修改为：\" + title);\n        });\n        \n        // 绑定自定义的信号customSignal\n        Bridge.customSignal.connect(function(text) {\n           showLog(\"收到自定义信号内容：\" + text);\n        });\n    }\n);\n```\n\n## 代码\n\n`QWebView`： https://github.com/PyQt5/PyQt/blob/master/QWebView/JsSignals.py\n\n`QWebEngineView`： https://github.com/PyQt5/PyQt/blob/master/QWebEngineView/JsSignals.py\n\n1. 针对`QWebView`的核心实现\n\n```python\nclass WebView(QWebView):\n\n    customSignal = pyqtSignal(str)\n\n    def __init__(self, *args, **kwargs):\n        super(WebView, self).__init__(*args, **kwargs)\n        self.initSettings()\n        # 暴露接口对象\n        self.page().mainFrame().javaScriptWindowObjectCleared.connect(self._exposeInterface)\n\n    def _exposeInterface(self):\n        \"\"\"向Js暴露调用本地方法接口\n        \"\"\"\n        self.page().mainFrame().addToJavaScriptWindowObject('Bridge', self)\n\n    # 注意pyqtSlot用于把该函数暴露给js可以调用\n    @pyqtSlot(str)\n    def callFromJs(self, text):\n        QMessageBox.information(self, \"提示\", \"来自js调用：{}\".format(text))\n\n    def sendCustomSignal(self):\n        # 发送自定义信号\n        self.customSignal.emit('当前时间: ' + str(time()))\n```\n\n2. 针对`QWebEngineView`的核心实现\n\n```python\nclass WebEngineView(QWebEngineView):\n\n    customSignal = pyqtSignal(str)\n\n    def __init__(self, *args, **kwargs):\n        super(WebEngineView, self).__init__(*args, **kwargs)\n        self.channel = QWebChannel(self)\n        # 把自身对象传递进去\n        self.channel.registerObject('Bridge', self)\n        # 设置交互接口\n        self.page().setWebChannel(self.channel)\n\n    # 注意pyqtSlot用于把该函数暴露给js可以调用\n    @pyqtSlot(str)\n    def callFromJs(self, text):\n        QMessageBox.information(self, \"提示\", \"来自js调用：{}\".format(text))\n\n    def sendCustomSignal(self):\n        # 发送自定义信号\n        self.customSignal.emit('当前时间: ' + str(time()))\n```\n\n\n## 效果图\n\n![JsSignals](https://github.com/PyQt5/PyQt/raw/master/QWebEngineView/ScreenShot/JsSignals.gif)","categories":[{"name":"例子","path":"api/categories/例子.json"}],"tags":[{"name":"PyQt","path":"api/tags/PyQt.json"},{"name":"QWebView","path":"api/tags/QWebView.json"},{"name":"QWebEngineView","path":"api/tags/QWebEngineView.json"},{"name":"浏览器","path":"api/tags/浏览器.json"}]}