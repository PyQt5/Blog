{"author":"Irony","title":"PyQt学习心得","slug":"studynotes","date":"2019-08-26 09:00:00","updated":"2019-10-21T15:46:10.228Z","comments":true,"path":"api/articles/studynotes.json","url":"https://pyqt5.com/studynotes.html","excerpt":"在学习PyQt的过程中由于资料的缺乏或者没有中文导致大多数人感叹资料太少，学习困难，又或者急于求进，赶鸭子上架的情况，此时有系统的学习方法很重要。每个人都需要有自己的学习方法，别人的学习方法并不一定适合自己但可以采纳一些。笔者在这里列举了一些当初自己自学的一些心得和方法，希望帮助大家建立一套自己的学习PyQt的方法，提高自身的学习能力。<br>","covers":["/images/studynotes/desiger_create.png","/images/studynotes/desiger_drag.png","/images/studynotes/desiger_property.png","/images/studynotes/desiger_signal.png","/images/studynotes/desiger_stack.png","/images/studynotes/desiger_layout.png"],"content":"<p>在学习PyQt的过程中由于资料的缺乏或者没有中文导致大多数人感叹资料太少，学习困难，又或者急于求进，赶鸭子上架的情况，此时有系统的学习方法很重要。每个人都需要有自己的学习方法，别人的学习方法并不一定适合自己但可以采纳一些。笔者在这里列举了一些当初自己自学的一些心得和方法，希望帮助大家建立一套自己的学习PyQt的方法，提高自身的学习能力。<br><a id=\"more\"></a></p>\n<h2 id=\"Python基础\"><a href=\"#Python基础\" class=\"headerlink\" title=\"Python基础\"></a>Python基础</h2><p>在学习和使用PyQt之前需要熟练使用Python，经过对QQ群里经常提问的问题的分析，发现大部分人对Python中的基础知识掌握不牢固导致很多基础问题，如果要想更好的使用Python以及它的扩展必需要进行系统的学习。这里列举一下常用的知识点。</p>\n<ol>\n<li>类　　　　　　　 　<a href=\"https://www.runoob.com/python3/python3-class.html\" target=\"_blank\" rel=\"noopener\">参考资料</a></li>\n<li>类的继承</li>\n<li>类的多继承</li>\n<li>类方法重写　　　　 <a href=\"https://www.runoob.com/w3cnote/python-extends-init.html\" target=\"_blank\" rel=\"noopener\">参考资料</a></li>\n<li>类中的super函数　　<a href=\"https://www.runoob.com/python/python-func-super.html\" target=\"_blank\" rel=\"noopener\">参考资料</a></li>\n<li>函数调用/参数类型</li>\n<li>对象调用(参考第1点)</li>\n</ol>\n<p>必须熟练掌握上面的知识点后入门PyQt才比较容易，如果初学者对上面的知识点还不是很了解，本文不适合继续往下阅读。</p>\n<h2 id=\"设计师\"><a href=\"#设计师\" class=\"headerlink\" title=\"设计师\"></a>设计师</h2><p>Qt 设计师除了方便快速设计一些简单的界面外，其实笔者觉得更大的作用在于帮助用户熟悉各类控件、属性、信号等</p>\n<ol>\n<li>这里建议初学者不要急于求成，打开设计师新建一个<code>Widget</code>的窗口，比如</li>\n</ol>\n<p><img src=\"/images/studynotes/desiger_create.png\" alt=\"desiger_create\"></p>\n<ol start=\"2\">\n<li>然后把左侧的所有控件挨个拖动到中间的窗口中，比如这里拖动一个<strong>Push Button</strong>按钮</li>\n</ol>\n<p><img src=\"/images/studynotes/desiger_drag.png\" alt=\"desiger_drag\"></p>\n<ol start=\"3\">\n<li>在设计师右下角的属性编辑器中列举了该控件的所有父类，意味着可以调用和重写父类的所有方法，建议初学者把这个属性编辑器的所有属性挨个调整看看效果，部分控件可能需要<strong>Ctrl+R</strong>预览界面才能看到，同时像<strong>QListWidget，QTreeWidget，QTableWidget</strong>等某些控件需要在控件上右键增加数据才可以</li>\n</ol>\n<p><img src=\"/images/studynotes/desiger_property.png\" alt=\"desiger_property\"><br><img src=\"/images/studynotes/desiger_property2.png\" alt=\"desiger_property2\"></p>\n<ol start=\"4\">\n<li>两个控件之间简单的信号槽关联可以通过设计师快速的设置</li>\n</ol>\n<p><img src=\"/images/studynotes/desiger_signal.png\" alt=\"desiger_signal\"><br><img src=\"/images/studynotes/desiger_signal2.png\" alt=\"desiger_signal2\"></p>\n<ol start=\"5\">\n<li>提高进阶的方法，当你需要手动写代码实现界面的时候，不妨把UI文件转出PY文件，看看是如何构造的（这里涉及到布局等知识见后文）</li>\n</ol>\n<h2 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h2><p>Qt界面提供了方便的4种基本布局，<strong>QVboxLayout，QHboxLayout，QFormLayout，QGridLayout</strong>，初学者需要数量掌握这4种布局外加2种拉伸器（占位挤压）</p>\n<p>首先需要知道Qt界面的中控件的层级顺序以及parent，parent的作用既作为子控件的父元素也可以自动管理Qt的对象（具体可以搜索下关于 Qt parent的资料）</p>\n<ol>\n<li>在没有布局的情况下，在设计师中拖动摆放的控件是一层一层的叠加覆盖，此时每个添加的子控件的parent都是最外层的控件</li>\n</ol>\n<p><img src=\"/images/studynotes/desiger_stack.png\" alt=\"desiger_stack\"></p>\n<ol start=\"2\">\n<li>如果需要界面中的控件自动适应高度宽度，此时则需要使用4种布局来包裹里面的子控件，注意的是：布局不是控件不能设置高度宽度和样式等，是一个抽象的东西，就好比是一根橡皮筋包裹几个矩形的物品；布局也可以设置一些属性（在设计师属性编辑器中），比如设置两者直接的间距，设置距离上下左右的间距，设置比例等</li>\n</ol>\n<p><img src=\"/images/studynotes/desiger_layout.png\" alt=\"desiger_layout\"></p>\n<ol start=\"3\">\n<li>在没有布局或者有布局的时候。可以添加容器控件（<strong>QWidget，QFrame，QGroupBox，QScrollArea，QToolBox，QTabWidget，QStackedWidget，QMidArea，QDockWidget</strong>）这些容器可以放置子控件，从而循环嵌套。</li>\n</ol>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>在PyQt5.5的时候自带了一个例子文件夹（后面的版本没有的话可以下载PyQt5源码，里面有个examples文件夹），想要熟练的掌握PyQt还需要从自带的例子中学习，必须要每个例子都运行一次然后看看这个例子实现了什么，这样才能记忆深刻。<br>同时很多开发者在<a href=\"https://github.com/PyQt5/PyQt\" target=\"_blank\" rel=\"noopener\">https://github.com/PyQt5/PyQt</a>分享了各类进阶例子，同时也欢迎大家共同完善该项目，提供更多更好的例子。另外也可以下载该项目的客户端<a href=\"https://github.com/PyQt5/PyQtClient/releases\" target=\"_blank\" rel=\"noopener\">PyQtClient</a>软件，支持运行其中的例子</p>\n<p>建议在更深入的学习PyQt之前多看看一些例子。</p>\n<h2 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h2><p>接下来要说的就是Qt的api文档，<a href=\"https://doc.qt.io/qt-5/classes.html\" target=\"_blank\" rel=\"noopener\">官网文档</a>，这里其实不要害怕是英文就不想看，觉得看不懂了，其实官网的文档还是比较简洁的，而且函数名也比较直观就能知道意思。也可以用谷歌浏览器打开右键翻译，基本上都能看懂。笔者前期写过一篇<a href=\"/viewapi.html\">如何查阅Qt文档</a>的文档可以阅读学习一番。</p>\n<p>这里就拿<a href=\"https://doc.qt.io/qt-5/qwebengineview.html\" target=\"_blank\" rel=\"noopener\">QWebEngineView</a>举一个例子，首先初学者在使用这个浏览器控件时候，会有诸多的问题比如：Cookie，拦截器等就不知道如何去调用函数来设置</p>\n<ol>\n<li>首先打开官网文档 <a href=\"https://doc.qt.io/qt-5/qwebengineview.html\" target=\"_blank\" rel=\"noopener\">https://doc.qt.io/qt-5/qwebengineview.html</a>，可以看到只有少量的函数可以调用，寻找一番并没有发现和Cookie相关的东西，这个时候就需要把重点放在有特俗返回值的函数上，比如：<pre><code class=\"c++\">QWebEngineHistory *              history() const\nQWebEnginePage *              page() const\nQWebEngineSettings *          settings() const\n</code></pre>\n</li>\n</ol>\n<p>这三个函数返回了一个类实例，就意味着可以调用其中的方法。</p>\n<ol start=\"2\">\n<li><p>点击<strong>page()</strong>打开 <a href=\"https://doc.qt.io/qt-5/qwebenginepage.html\" target=\"_blank\" rel=\"noopener\">https://doc.qt.io/qt-5/qwebenginepage.html</a>，发现没有cookie相关的东西，只有<strong>QWebEngineProfile *    profile() const</strong>这个函数比较可疑。</p>\n</li>\n<li><p>点击<strong>profile()</strong>打开 <a href=\"https://doc.qt.io/qt-5/qwebengineprofile.html\" target=\"_blank\" rel=\"noopener\">https://doc.qt.io/qt-5/qwebengineprofile.html</a>，在浏览器中搜索<code>cookie</code>发现这个类中包含大量和cookie相关的东西，比如：<strong>QWebEngineCookieStore *    cookieStore()`</strong>从名字上可以猜测大概意思为cookie储存</p>\n</li>\n<li><p>点击<strong>cookieStore()</strong>打开 <a href=\"https://doc.qt.io/qt-5/qwebenginecookiestore.html\" target=\"_blank\" rel=\"noopener\">https://doc.qt.io/qt-5/qwebenginecookiestore.html</a>，此时就会发现这个类里面包含了删除和设置cookie的方法。</p>\n</li>\n<li><p>但是找到了这些方法后，面对初学者又一个问题来了，该如何去用？根据上面4点整理一下，把他们当做简单的Python对象，方法和操作方法和class一样的。</p>\n</li>\n</ol>\n<pre><code class=\"python\">self.webview = QWebEngineView()\n# 得到page\npage = self.webview.page()\n# 得到profile\nprofile = page.profile()\n# 得到cookieStore\ncookieStore = profile.cookieStore()\n# 清空cookie\ncookieStore.deleteAllCookies()\n\n# 用简短代码来表达就是\ncookieStore = self.webview.page().profile().cookieStore()\ncookieStore.deleteAllCookies()\n</code></pre>\n<h2 id=\"异常调试\"><a href=\"#异常调试\" class=\"headerlink\" title=\"异常调试\"></a>异常调试</h2><p>可能有时候由于粗心，或者调用了一些非法函数，参数错误等会导致程序出现一些异常，首先第一步复制最后一行的错误去百度或者谷歌搜索，大多时候能找到问题所在。其次如果搜索不到或者自己的异常可能是由于某个变量的值不对引起的，就需要在编辑器中打断点使用DEBUG模式调试变量值（如果不会可以采用麻烦一点的办法：用<code>print</code>打印出变量值）</p>\n<p>遇到问题后首先需要自己多调试排查问题，不要一遇到问题就去问，自己多尝试一个一个排查直到找到问题所在并解决，这也是一种提高自身能力的地方。</p>\n<h2 id=\"检索资料\"><a href=\"#检索资料\" class=\"headerlink\" title=\"检索资料\"></a>检索资料</h2><p>作为一个开发人员确实需要具备查阅文档、查询资料等基础技能，会为自己的开发带来很大的帮助，要善于搜索，通过不同的方式去搜索才能找到自己需要的东西。信息检索是每个程序猿必备的能力之一，其好处在于可以更快更准确的在茫茫网络海洋中找到自己所需要的东西，这个过程需要长期不断积累和练习。</p>\n<ol>\n<li>中文搜索引擎：采用多个关键词 以空格分开搜索，如：PyQt 拖拽</li>\n<li>英文搜索引擎：采用多个关键词 以空格分开搜索，如：PyQt Drag Drop</li>\n</ol>\n<h2 id=\"片尾\"><a href=\"#片尾\" class=\"headerlink\" title=\"片尾\"></a>片尾</h2><p>好了，笔者基本上的学习过程就整理如上，这并不是说每个人都适合这样的方法，但至少笔者是这样一步一步走过来的。当你养成了一个学习、发现和解决问题的好习惯时就会慢慢得心应手。</p>\n","raw":"---\nauthor: Irony\ntitle: PyQt学习心得\ndate: 2019-08-26 09:00:00\ntop: 888\ntags: \n - PyQt\ncategories: 笔记\n---\n\n在学习PyQt的过程中由于资料的缺乏或者没有中文导致大多数人感叹资料太少，学习困难，又或者急于求进，赶鸭子上架的情况，此时有系统的学习方法很重要。每个人都需要有自己的学习方法，别人的学习方法并不一定适合自己但可以采纳一些。笔者在这里列举了一些当初自己自学的一些心得和方法，希望帮助大家建立一套自己的学习PyQt的方法，提高自身的学习能力。\n<!-- more -->\n\n## Python基础\n\n在学习和使用PyQt之前需要熟练使用Python，经过对QQ群里经常提问的问题的分析，发现大部分人对Python中的基础知识掌握不牢固导致很多基础问题，如果要想更好的使用Python以及它的扩展必需要进行系统的学习。这里列举一下常用的知识点。\n\n1. 类　　　　　　　 　[参考资料](https://www.runoob.com/python3/python3-class.html)\n2. 类的继承\n3. 类的多继承\n4. 类方法重写　　　　 [参考资料](https://www.runoob.com/w3cnote/python-extends-init.html)\n5. 类中的super函数　　[参考资料](https://www.runoob.com/python/python-func-super.html)\n6. 函数调用/参数类型\n7. 对象调用(参考第1点)\n\n必须熟练掌握上面的知识点后入门PyQt才比较容易，如果初学者对上面的知识点还不是很了解，本文不适合继续往下阅读。\n\n## 设计师\n\nQt 设计师除了方便快速设计一些简单的界面外，其实笔者觉得更大的作用在于帮助用户熟悉各类控件、属性、信号等\n\n1. 这里建议初学者不要急于求成，打开设计师新建一个`Widget`的窗口，比如\n\n![desiger_create](/images/studynotes/desiger_create.png)\n\n2. 然后把左侧的所有控件挨个拖动到中间的窗口中，比如这里拖动一个**Push Button**按钮\n\n![desiger_drag](/images/studynotes/desiger_drag.png)\n\n3. 在设计师右下角的属性编辑器中列举了该控件的所有父类，意味着可以调用和重写父类的所有方法，建议初学者把这个属性编辑器的所有属性挨个调整看看效果，部分控件可能需要**Ctrl+R**预览界面才能看到，同时像**QListWidget，QTreeWidget，QTableWidget**等某些控件需要在控件上右键增加数据才可以\n\n![desiger_property](/images/studynotes/desiger_property.png)\n![desiger_property2](/images/studynotes/desiger_property2.png)\n\n4. 两个控件之间简单的信号槽关联可以通过设计师快速的设置\n\n![desiger_signal](/images/studynotes/desiger_signal.png)\n![desiger_signal2](/images/studynotes/desiger_signal2.png)\n\n5. 提高进阶的方法，当你需要手动写代码实现界面的时候，不妨把UI文件转出PY文件，看看是如何构造的（这里涉及到布局等知识见后文）\n\n## 布局\n\nQt界面提供了方便的4种基本布局，**QVboxLayout，QHboxLayout，QFormLayout，QGridLayout**，初学者需要数量掌握这4种布局外加2种拉伸器（占位挤压）\n\n首先需要知道Qt界面的中控件的层级顺序以及parent，parent的作用既作为子控件的父元素也可以自动管理Qt的对象（具体可以搜索下关于 Qt parent的资料）\n\n1. 在没有布局的情况下，在设计师中拖动摆放的控件是一层一层的叠加覆盖，此时每个添加的子控件的parent都是最外层的控件\n\n![desiger_stack](/images/studynotes/desiger_stack.png)\n\n2. 如果需要界面中的控件自动适应高度宽度，此时则需要使用4种布局来包裹里面的子控件，注意的是：布局不是控件不能设置高度宽度和样式等，是一个抽象的东西，就好比是一根橡皮筋包裹几个矩形的物品；布局也可以设置一些属性（在设计师属性编辑器中），比如设置两者直接的间距，设置距离上下左右的间距，设置比例等\n\n![desiger_layout](/images/studynotes/desiger_layout.png)\n\n3. 在没有布局或者有布局的时候。可以添加容器控件（**QWidget，QFrame，QGroupBox，QScrollArea，QToolBox，QTabWidget，QStackedWidget，QMidArea，QDockWidget**）这些容器可以放置子控件，从而循环嵌套。\n\n## 例子\n\n在PyQt5.5的时候自带了一个例子文件夹（后面的版本没有的话可以下载PyQt5源码，里面有个examples文件夹），想要熟练的掌握PyQt还需要从自带的例子中学习，必须要每个例子都运行一次然后看看这个例子实现了什么，这样才能记忆深刻。\n同时很多开发者在[https://github.com/PyQt5/PyQt](https://github.com/PyQt5/PyQt)分享了各类进阶例子，同时也欢迎大家共同完善该项目，提供更多更好的例子。另外也可以下载该项目的客户端[PyQtClient](https://github.com/PyQt5/PyQtClient/releases)软件，支持运行其中的例子\n\n建议在更深入的学习PyQt之前多看看一些例子。\n\n## 文档\n\n接下来要说的就是Qt的api文档，[官网文档](https://doc.qt.io/qt-5/classes.html)，这里其实不要害怕是英文就不想看，觉得看不懂了，其实官网的文档还是比较简洁的，而且函数名也比较直观就能知道意思。也可以用谷歌浏览器打开右键翻译，基本上都能看懂。笔者前期写过一篇[如何查阅Qt文档](/viewapi.html)的文档可以阅读学习一番。\n\n这里就拿[QWebEngineView](https://doc.qt.io/qt-5/qwebengineview.html)举一个例子，首先初学者在使用这个浏览器控件时候，会有诸多的问题比如：Cookie，拦截器等就不知道如何去调用函数来设置\n\n1. 首先打开官网文档 [https://doc.qt.io/qt-5/qwebengineview.html](https://doc.qt.io/qt-5/qwebengineview.html)，可以看到只有少量的函数可以调用，寻找一番并没有发现和Cookie相关的东西，这个时候就需要把重点放在有特俗返回值的函数上，比如：\n```c++\nQWebEngineHistory *\t          history() const\nQWebEnginePage *\t          page() const\nQWebEngineSettings *\t      settings() const\n```\n\n这三个函数返回了一个类实例，就意味着可以调用其中的方法。\n\n2. 点击**page()**打开 [https://doc.qt.io/qt-5/qwebenginepage.html](https://doc.qt.io/qt-5/qwebenginepage.html)，发现没有cookie相关的东西，只有**QWebEngineProfile *\tprofile() const**这个函数比较可疑。\n\n3. 点击**profile()**打开 [https://doc.qt.io/qt-5/qwebengineprofile.html](https://doc.qt.io/qt-5/qwebengineprofile.html)，在浏览器中搜索`cookie`发现这个类中包含大量和cookie相关的东西，比如：**QWebEngineCookieStore *\tcookieStore()`**从名字上可以猜测大概意思为cookie储存\n\n4. 点击**cookieStore()**打开 [https://doc.qt.io/qt-5/qwebenginecookiestore.html](https://doc.qt.io/qt-5/qwebenginecookiestore.html)，此时就会发现这个类里面包含了删除和设置cookie的方法。\n\n5. 但是找到了这些方法后，面对初学者又一个问题来了，该如何去用？根据上面4点整理一下，把他们当做简单的Python对象，方法和操作方法和class一样的。\n\n```python\nself.webview = QWebEngineView()\n# 得到page\npage = self.webview.page()\n# 得到profile\nprofile = page.profile()\n# 得到cookieStore\ncookieStore = profile.cookieStore()\n# 清空cookie\ncookieStore.deleteAllCookies()\n\n# 用简短代码来表达就是\ncookieStore = self.webview.page().profile().cookieStore()\ncookieStore.deleteAllCookies()\n```\n\n## 异常调试\n\n可能有时候由于粗心，或者调用了一些非法函数，参数错误等会导致程序出现一些异常，首先第一步复制最后一行的错误去百度或者谷歌搜索，大多时候能找到问题所在。其次如果搜索不到或者自己的异常可能是由于某个变量的值不对引起的，就需要在编辑器中打断点使用DEBUG模式调试变量值（如果不会可以采用麻烦一点的办法：用`print`打印出变量值）\n\n遇到问题后首先需要自己多调试排查问题，不要一遇到问题就去问，自己多尝试一个一个排查直到找到问题所在并解决，这也是一种提高自身能力的地方。\n\n## 检索资料\n\n作为一个开发人员确实需要具备查阅文档、查询资料等基础技能，会为自己的开发带来很大的帮助，要善于搜索，通过不同的方式去搜索才能找到自己需要的东西。信息检索是每个程序猿必备的能力之一，其好处在于可以更快更准确的在茫茫网络海洋中找到自己所需要的东西，这个过程需要长期不断积累和练习。\n\n1. 中文搜索引擎：采用多个关键词 以空格分开搜索，如：PyQt 拖拽\n2. 英文搜索引擎：采用多个关键词 以空格分开搜索，如：PyQt Drag Drop\n\n## 片尾\n\n好了，笔者基本上的学习过程就整理如上，这并不是说每个人都适合这样的方法，但至少笔者是这样一步一步走过来的。当你养成了一个学习、发现和解决问题的好习惯时就会慢慢得心应手。","categories":[{"name":"笔记","path":"api/categories/笔记.json"}],"tags":[{"name":"PyQt","path":"api/tags/PyQt.json"}]}