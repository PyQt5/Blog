{"author":"人间白头　","title":"python 拷贝虚拟环境(一) 　","slug":"virtualenvpy","date":"2019-05-02 15:21:01","updated":"2019-11-22T10:12:08.357Z","comments":true,"path":"api/articles/virtualenvpy.json","url":"https://pyqt5.com/virtualenvpy.html","excerpt":"通常来说 ,  刚开始使用python的时候都是把包装到全局路径 , 随着各个项目安装的包越来越多 , 之后每开始一个项目 , pycharm创建索引的时间都越来越漫长 , 所以不可避免得开始使用虚拟环境。<br>经过一番了解 ，虚拟环境的优点有这些：改善 pycharm 索引时间;各个项目的库不会冲突；理论上虚拟环境可以给同版本的操作系统使用(未试验过);pip freeze &gt; requestment.txt 导出的依赖清晰;各个版本的python共存;…","covers":null,"content":"<p>通常来说 ,  刚开始使用python的时候都是把包装到全局路径 , 随着各个项目安装的包越来越多 , 之后每开始一个项目 , pycharm创建索引的时间都越来越漫长 , 所以不可避免得开始使用虚拟环境。<br>经过一番了解 ，虚拟环境的优点有这些：</p>\n<ul>\n<li>改善 pycharm 索引时间;</li>\n<li>各个项目的库不会冲突；</li>\n<li>理论上虚拟环境可以给同版本的操作系统使用(未试验过);</li>\n<li>pip freeze &gt; requestment.txt 导出的依赖清晰;</li>\n<li>各个版本的python共存;</li>\n<li>…<a id=\"more\"></a>\n</li>\n</ul>\n<p>python虚拟环境库除了自带的venv , 还有三方库<code>virtualenv</code> , 此外 在<code>virtualenv</code>基础上又开发了<code>virtualenvwrapper(virtualenvwrapper_win)</code> 来管理</p>\n<p>本文基于<code>virtualenvwrapper</code> 创建的虚拟环境来讲解.</p>\n<pre><code>以下是收集的一些virtualenvwrapper配置教程:\n# linux平台\nhttps://www.cnblogs.com/netfoxman/p/5994697.html\n# window平台\nhttps://blog.csdn.net/shaququ/article/details/54292043  　\nhttps://blog.csdn.net/iaau0908/article/details/54021518\n</code></pre><p>虚拟环境创建多了我们就会发现 ,<br>有时候使用相同版本的环境,一些常用的库是需要重新安装的,<br>那么能不能创建一个基础环境, 默认拥有这些库, 然后在这个基础环境上继续安装三方库呢 ?</p>\n<p>本文经过试验发现是可行的:</p>\n<ol>\n<li><p>创建基础虚拟环境 <code>mkvirtualenv &lt;环境名称&gt; [-p空格python其他版本的解释器路径]</code>.  例如 <code>mkvirtualenv py34 -p c:\\Python34\\python.exe</code></p>\n</li>\n<li><p>切换到虚拟环境<code>workon py34</code> , 然后安装一下三方库, 然后复制<code>py34</code>这个文件夹备份一下 ;</p>\n</li>\n<li>接着复制这个<code>py34</code>文件夹, 把复制后的文件夹改名为我们需要需要的文件夹例如<code>new34</code></li>\n<li>进入<code>new34文件夹</code>, 用任意编辑器全路径搜索<code>py34</code>(替换虚拟环境的路径)</li>\n<li>删除<code>new34/Scripts</code>下的<code>pip.exe, pip3.exe, pip3.x.exe, easy_install.exe</code>(因为安装路径硬编码到这里面了, 改不了, 需要重新安装)</li>\n<li><a href=\"https://blog.csdn.net/douniwan007009/article/details/81463958\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/douniwan007009/article/details/81463958</a> 按方式二 , 源码安装 <code>setuptools</code> 后再用<code>easy_install pip</code> 安装pip后 , 完成 ;<br>如果有问题, 就继续按照方式一的源码安装pip;</li>\n<li>在<code>new34</code>环境下 用<code>pip show 三方库</code> 来看一些库的位置, 确保正确.</li>\n</ol>\n","raw":"---\nauthor: 人间白头　\ntitle: python 拷贝虚拟环境(一) 　\ndate: 2019-05-02 15:21:01\ntop: 1\ntags:\n - Python\n - virtualenvwrapper\n - virtualenv\ncategories: 随笔\n---\n\n通常来说 ,  刚开始使用python的时候都是把包装到全局路径 , 随着各个项目安装的包越来越多 , 之后每开始一个项目 , pycharm创建索引的时间都越来越漫长 , 所以不可避免得开始使用虚拟环境。\n经过一番了解 ，虚拟环境的优点有这些：\n- 改善 pycharm 索引时间;\n- 各个项目的库不会冲突；\n- 理论上虚拟环境可以给同版本的操作系统使用(未试验过);\n- pip freeze > requestment.txt 导出的依赖清晰;\n- 各个版本的python共存;\n- ...\n<!-- more -->\n\npython虚拟环境库除了自带的venv , 还有三方库`virtualenv` , 此外 在`virtualenv`基础上又开发了`virtualenvwrapper(virtualenvwrapper_win)` 来管理\n\n本文基于`virtualenvwrapper` 创建的虚拟环境来讲解.\n\n    以下是收集的一些virtualenvwrapper配置教程:\n    # linux平台\n    https://www.cnblogs.com/netfoxman/p/5994697.html\n    # window平台\n    https://blog.csdn.net/shaququ/article/details/54292043  　\n    https://blog.csdn.net/iaau0908/article/details/54021518\n虚拟环境创建多了我们就会发现 ,\n有时候使用相同版本的环境,一些常用的库是需要重新安装的, \n那么能不能创建一个基础环境, 默认拥有这些库, 然后在这个基础环境上继续安装三方库呢 ?\n\n本文经过试验发现是可行的:\n\n1. 创建基础虚拟环境 `mkvirtualenv <环境名称> [-p空格python其他版本的解释器路径]`.  例如 `mkvirtualenv py34 -p c:\\Python34\\python.exe`\n\n2. 切换到虚拟环境`workon py34` , 然后安装一下三方库, 然后复制`py34`这个文件夹备份一下 ;\n3. 接着复制这个`py34`文件夹, 把复制后的文件夹改名为我们需要需要的文件夹例如`new34`\n4. 进入`new34文件夹`, 用任意编辑器全路径搜索`py34`(替换虚拟环境的路径)\n5. 删除`new34/Scripts`下的`pip.exe, pip3.exe, pip3.x.exe, easy_install.exe`(因为安装路径硬编码到这里面了, 改不了, 需要重新安装)\n6. https://blog.csdn.net/douniwan007009/article/details/81463958 按方式二 , 源码安装 `setuptools` 后再用`easy_install pip` 安装pip后 , 完成 ;\n 如果有问题, 就继续按照方式一的源码安装pip;\n7. 在`new34`环境下 用`pip show 三方库` 来看一些库的位置, 确保正确.\n\n   \n","categories":[{"name":"随笔","path":"api/categories/随笔.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"},{"name":"virtualenvwrapper","path":"api/tags/virtualenvwrapper.json"},{"name":"virtualenv","path":"api/tags/virtualenv.json"}]}