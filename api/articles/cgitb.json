{"author":"Irony","title":"异常捕获之cgitb模块","slug":"cgitb","date":"2018-09-17 23:17:06","updated":"2020-04-06T11:24:13.171Z","comments":true,"path":"api/articles/cgitb.json","url":"https://pyqt5.com/cgitb.html","excerpt":"cgitb模块为Python脚本提供了一个特殊的异常管理器。名字有点误导人，它最初设计是为了以HTML格式展示cgi脚本的大量异常信息。后来，他扩展为也可以展示纯文本信息。该模块激活后，如果发生了未捕获的异常，将会展示格式化的输出报告。该报告包括源代码每一层的回溯，以及当前执行程序的参数和局部变量。以及，你可以选择将这些信息存到一个文件里，而不是发送到浏览器。<br>","covers":null,"content":"<p><code>cgitb</code>模块为<code>Python</code>脚本提供了一个特殊的异常管理器。名字有点误导人，它最初设计是为了以HTML格式展示cgi脚本的大量异常信息。后来，他扩展为也可以展示纯文本信息。该模块激活后，如果发生了未捕获的异常，将会展示格式化的输出报告。该报告包括源代码每一层的回溯，以及当前执行程序的参数和局部变量。以及，你可以选择将这些信息存到一个文件里，而不是发送到浏览器。<br><a id=\"more\"></a></p>\n<h2 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h2><p>当编辑器中无法显示错误信息时，尤其是<code>PyQt</code>，可以尝试在cmd中运行代码，或者使用此模块来得到错误信息。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"cgitb-enable\"><a href=\"#cgitb-enable\" class=\"headerlink\" title=\"cgitb.enable\"></a>cgitb.enable</h3><pre><code class=\"python\">cgitb.enable(display=1, logdir=None, context=5, format=&quot;html&quot;)\n</code></pre>\n<p>参数说明</p>\n<ol>\n<li>display 1，发送至浏览器；0， 不发送</li>\n<li>logdir 如果有的话，写到该目录下</li>\n<li>context 显示错误代码周围的代码行数</li>\n<li>format 是否显示为HTML，除了’html’之外的所有值，都会显示为纯文本</li>\n</ol>\n<h3 id=\"cgitb-handle\"><a href=\"#cgitb-handle\" class=\"headerlink\" title=\"cgitb.handle\"></a>cgitb.handle</h3><pre><code class=\"python\">cgitb.handle(info=None)\n</code></pre>\n<p>参数说明</p>\n<ol>\n<li>如果你想用cgitb处理异常，你可以调用这个函数。</li>\n<li>info 应当是含有异常类型、异常值和traceback对象的三元组</li>\n<li>如同sys.exc_info()返回的那样。如果不提供info，则从sys.exc_info中获取。</li>\n</ol>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>以下代码放在最开始执行</p>\n<pre><code class=\"python\">import cgitb\nimport sys\nsys.excepthook = cgitb.Hook(1, None, 5, sys.stderr, &#39;text&#39;)\n</code></pre>\n","raw":"---\nauthor: Irony\ntitle: 异常捕获之cgitb模块\ndate: 2018-09-17 23:17:06\ntop: 1\ntags: \n - Python\n - 异常\ncategories: 笔记\n---\n\n`cgitb`模块为`Python`脚本提供了一个特殊的异常管理器。名字有点误导人，它最初设计是为了以HTML格式展示cgi脚本的大量异常信息。后来，他扩展为也可以展示纯文本信息。该模块激活后，如果发生了未捕获的异常，将会展示格式化的输出报告。该报告包括源代码每一层的回溯，以及当前执行程序的参数和局部变量。以及，你可以选择将这些信息存到一个文件里，而不是发送到浏览器。\n<!-- more -->\n\n## 用途\n\n当编辑器中无法显示错误信息时，尤其是`PyQt`，可以尝试在cmd中运行代码，或者使用此模块来得到错误信息。\n\n## 介绍\n\n### cgitb.enable\n\n```python\ncgitb.enable(display=1, logdir=None, context=5, format=\"html\")\n```\n\n参数说明\n\n1. display 1，发送至浏览器；0， 不发送\n2. logdir 如果有的话，写到该目录下\n3. context 显示错误代码周围的代码行数\n4. format 是否显示为HTML，除了'html'之外的所有值，都会显示为纯文本\n\n### cgitb.handle\n\n```python\ncgitb.handle(info=None)\n```\n\n参数说明\n\n1. 如果你想用cgitb处理异常，你可以调用这个函数。\n2. info 应当是含有异常类型、异常值和traceback对象的三元组\n3. 如同sys.exc_info()返回的那样。如果不提供info，则从sys.exc_info中获取。\n\n## 如何使用\n\n以下代码放在最开始执行\n\n```python\nimport cgitb\nimport sys\nsys.excepthook = cgitb.Hook(1, None, 5, sys.stderr, 'text')\n```\n","categories":[{"name":"笔记","path":"api/categories/笔记.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"},{"name":"异常","path":"api/tags/异常.json"}]}