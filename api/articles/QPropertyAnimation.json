{"author":"Irony","title":"PyQt属性动画(QPropertyAnimation)","slug":"QPropertyAnimation","date":"2019-05-08 15:43:06","updated":"2019-10-21T12:56:37.609Z","comments":true,"path":"api/articles/QPropertyAnimation.json","url":"https://pyqt5.com/QPropertyAnimation.html","excerpt":"QPropertyAnimation继承自QVariantAnimation，其作为Qt的属性动画用于针对控件的属性或者继承自QObject的对象中定义的属性做修改，<br>简单来说就是基类是QObject且定义了属性变量，就可以用QPropertyAnimation来做属性动画。同时也可以通过pyqtProperty来增加自定义属性。<br>","covers":["/images/QPropertyAnimation.gif"],"content":"<p><code>QPropertyAnimation</code>继承自<code>QVariantAnimation</code>，其作为Qt的属性动画用于针对控件的属性或者继承自<code>QObject</code>的对象中定义的属性做修改，<br>简单来说就是基类是<code>QObject</code>且定义了属性变量，就可以用<code>QPropertyAnimation</code>来做属性动画。同时也可以通过<code>pyqtProperty</code>来增加自定义属性。<br><a id=\"more\"></a></p>\n<p>首先，通过构造函数<code>QPropertyAnimation(QObject, Union[QByteArray, bytes, bytearray], parent: QObject = None)</code>创建一个对象，其中</p>\n<ol>\n<li>第一个参数是动画作用的对象，也可以通过<code>setTargetObject</code>设置</li>\n<li>第二个参数是属性名，在py3中类型是bytes，也可以通过<code>setPropertyName</code>设置</li>\n</ol>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>一些常见的设置函数</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">setPropertyName</td>\n<td style=\"text-align:left\">设置属性名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">setTargetObject</td>\n<td style=\"text-align:left\">设置动画作用对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">setDuration</td>\n<td style=\"text-align:left\">设置动画持续时间（毫秒）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">setStartValue</td>\n<td style=\"text-align:left\">设置开始值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">setEndValue</td>\n<td style=\"text-align:left\">设置结束值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">setEasingCurve</td>\n<td style=\"text-align:left\">设置动画曲线</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">setKeyValueAt</td>\n<td style=\"text-align:left\">插入线性值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">setLoopCount</td>\n<td style=\"text-align:left\">设置循环次数（-1为永久）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>比如这个例子：</p>\n<ol>\n<li>修改控件的<code>geometry</code>大小</li>\n<li>修改自定义属性</li>\n<li>修改进度条的value值</li>\n</ol>\n<p><img src=\"/images/QPropertyAnimation.gif\" alt=\"QPropertyAnimation\"></p>\n<pre><code class=\"python\">#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n&quot;&quot;&quot;\nCreated on 2019年5月8日\n@author: Irony\n@site: https://pyqt5.com https://github.com/892768447\n@email: 892768447@qq.com\n@file: \n@description: \n&quot;&quot;&quot;\nfrom PyQt5.QtCore import QPropertyAnimation, QRect, pyqtProperty, QEasingCurve\nfrom PyQt5.QtWidgets import QWidget, QPushButton, QVBoxLayout,\\\n    QLabel, QProgressBar, QSpacerItem, QSizePolicy\n\n\n__Author__ = &#39;Irony&#39;\n__Copyright__ = &#39;Copyright (c) 2019 Irony&#39;\n__Version__ = 1.0\n\n\nclass Window(QWidget):\n\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 400)\n        self._value = 0\n        self.button = QPushButton(&#39;属性动画测试&#39;, self)\n        self.button.clicked.connect(self.doStart)\n        self.button.setGeometry(0, 0, 80, 40)\n\n        self.buttonc = QPushButton(&#39;自定义属性 测试&#39;, self)\n        self.buttonc.clicked.connect(self.doStartCustom)\n\n        self.label = QLabel(&#39;&#39;, self)\n\n        self.progressbar = QProgressBar(self)\n        self.progressbar.setRange(0, 99)\n\n        layout = QVBoxLayout(self)\n        layout.addItem(QSpacerItem(\n            20, 60, QSizePolicy.Fixed, QSizePolicy.Fixed))\n        layout.addWidget(self.buttonc)\n        layout.addWidget(self.label)\n        layout.addWidget(self.progressbar)\n\n        # 进度条动画\n        self.progressStart()\n\n    # 此处是自定义属性，并通过动画修改后，设置QLabel的值\n    @pyqtProperty(int)\n    def value(self):\n        return self._value\n\n    @value.setter\n    def value(self, v):\n        self._value = v\n        self.label.setText(&#39;当前值：{}&#39;.format(v))\n\n    def doStart(self):\n        # 第一个参数是要执行的对象\n        animation = QPropertyAnimation(self.button, b&#39;geometry&#39;, self)\n        animation.setDuration(2000)  # 持续时间\n        # 缓和曲线风格,加了曲线动画会很大程度影响\n        animation.setEasingCurve(QEasingCurve.OutBounce)\n        animation.setStartValue(QRect(0, 0, 40, 40))\n        animation.setEndValue(QRect(250, 250, 80, 80))\n        animation.start(animation.DeleteWhenStopped)\n\n    def doStartCustom(self):\n        # 自定义属性动画\n        # 由于定义的属性是在继承的QWidget, 所以第一个参数是self\n        # 第二个参数就是 value\n        animation = QPropertyAnimation(self, b&#39;value&#39;, self)\n        animation.setDuration(2000)  # 持续时间\n        animation.setStartValue(0)\n        animation.setEndValue(100)\n        animation.start(animation.DeleteWhenStopped)\n\n    def progressStart(self):\n        # 进度条动画\n        # 这里 value是QProgressBar自带的属性，具体可以看文档\n        # https://doc.qt.io/qt-5/qprogressbar.html#properties\n        animation = QPropertyAnimation(self.progressbar, b&#39;value&#39;, self)\n        animation.setDuration(2000)  # 持续时间\n        animation.setLoopCount(-1)\n        # 这里采用插入线性值,第一个参数的范围是（0-1）\n        # 第二个参数的范围是进度（最小值-最大值）\n        animation.setKeyValueAt(0, self.progressbar.minimum())\n        animation.setKeyValueAt(0.1, 10)\n        animation.setKeyValueAt(0.2, 30)\n        animation.setKeyValueAt(0.5, 60)\n        animation.setKeyValueAt(0.7, 80)\n        animation.setKeyValueAt(1, self.progressbar.maximum())\n        animation.start(animation.DeleteWhenStopped)\n\n\nif __name__ == &#39;__main__&#39;:\n    import sys\n    from PyQt5.QtWidgets import QApplication\n    app = QApplication(sys.argv)\n    w = Window()\n    w.show()\n    sys.exit(app.exec_())\n\n</code></pre>\n","raw":"---\nauthor: Irony\ntitle: PyQt属性动画(QPropertyAnimation)\ndate: 2019-05-08 15:43:06\ntop: 1\ntags: \n - PyQt\n - 动画\ncategories: 笔记\n---\n\n`QPropertyAnimation`继承自`QVariantAnimation`，其作为Qt的属性动画用于针对控件的属性或者继承自`QObject`的对象中定义的属性做修改，\n简单来说就是基类是`QObject`且定义了属性变量，就可以用`QPropertyAnimation`来做属性动画。同时也可以通过`pyqtProperty`来增加自定义属性。\n<!-- more -->\n\n首先，通过构造函数`QPropertyAnimation(QObject, Union[QByteArray, bytes, bytearray], parent: QObject = None)`创建一个对象，其中\n\n1. 第一个参数是动画作用的对象，也可以通过`setTargetObject`设置\n2. 第二个参数是属性名，在py3中类型是bytes，也可以通过`setPropertyName`设置\n\n## 函数\n\n一些常见的设置函数\n\n|                 |              |\n| :-------------- | :---------- |\n| setPropertyName |   设置属性名  |\n| setTargetObject | 设置动画作用对象  |\n|   setDuration   | 设置动画持续时间（毫秒）  |\n|  setStartValue  |   设置开始值  |\n|   setEndValue   |   设置结束值  |\n|  setEasingCurve | 设置动画曲线  |\n|  setKeyValueAt  |  插入线性值   |\n|   setLoopCount  | 设置循环次数（-1为永久）  |\n\n## 示例\n\n比如这个例子：\n\n1. 修改控件的`geometry`大小\n2. 修改自定义属性\n3. 修改进度条的value值\n\n![QPropertyAnimation](/images/QPropertyAnimation.gif)\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nCreated on 2019年5月8日\n@author: Irony\n@site: https://pyqt5.com https://github.com/892768447\n@email: 892768447@qq.com\n@file: \n@description: \n\"\"\"\nfrom PyQt5.QtCore import QPropertyAnimation, QRect, pyqtProperty, QEasingCurve\nfrom PyQt5.QtWidgets import QWidget, QPushButton, QVBoxLayout,\\\n    QLabel, QProgressBar, QSpacerItem, QSizePolicy\n\n\n__Author__ = 'Irony'\n__Copyright__ = 'Copyright (c) 2019 Irony'\n__Version__ = 1.0\n\n\nclass Window(QWidget):\n\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        self.resize(400, 400)\n        self._value = 0\n        self.button = QPushButton('属性动画测试', self)\n        self.button.clicked.connect(self.doStart)\n        self.button.setGeometry(0, 0, 80, 40)\n\n        self.buttonc = QPushButton('自定义属性 测试', self)\n        self.buttonc.clicked.connect(self.doStartCustom)\n\n        self.label = QLabel('', self)\n\n        self.progressbar = QProgressBar(self)\n        self.progressbar.setRange(0, 99)\n\n        layout = QVBoxLayout(self)\n        layout.addItem(QSpacerItem(\n            20, 60, QSizePolicy.Fixed, QSizePolicy.Fixed))\n        layout.addWidget(self.buttonc)\n        layout.addWidget(self.label)\n        layout.addWidget(self.progressbar)\n\n        # 进度条动画\n        self.progressStart()\n\n    # 此处是自定义属性，并通过动画修改后，设置QLabel的值\n    @pyqtProperty(int)\n    def value(self):\n        return self._value\n\n    @value.setter\n    def value(self, v):\n        self._value = v\n        self.label.setText('当前值：{}'.format(v))\n\n    def doStart(self):\n        # 第一个参数是要执行的对象\n        animation = QPropertyAnimation(self.button, b'geometry', self)\n        animation.setDuration(2000)  # 持续时间\n        # 缓和曲线风格,加了曲线动画会很大程度影响\n        animation.setEasingCurve(QEasingCurve.OutBounce)\n        animation.setStartValue(QRect(0, 0, 40, 40))\n        animation.setEndValue(QRect(250, 250, 80, 80))\n        animation.start(animation.DeleteWhenStopped)\n\n    def doStartCustom(self):\n        # 自定义属性动画\n        # 由于定义的属性是在继承的QWidget, 所以第一个参数是self\n        # 第二个参数就是 value\n        animation = QPropertyAnimation(self, b'value', self)\n        animation.setDuration(2000)  # 持续时间\n        animation.setStartValue(0)\n        animation.setEndValue(100)\n        animation.start(animation.DeleteWhenStopped)\n\n    def progressStart(self):\n        # 进度条动画\n        # 这里 value是QProgressBar自带的属性，具体可以看文档\n        # https://doc.qt.io/qt-5/qprogressbar.html#properties\n        animation = QPropertyAnimation(self.progressbar, b'value', self)\n        animation.setDuration(2000)  # 持续时间\n        animation.setLoopCount(-1)\n        # 这里采用插入线性值,第一个参数的范围是（0-1）\n        # 第二个参数的范围是进度（最小值-最大值）\n        animation.setKeyValueAt(0, self.progressbar.minimum())\n        animation.setKeyValueAt(0.1, 10)\n        animation.setKeyValueAt(0.2, 30)\n        animation.setKeyValueAt(0.5, 60)\n        animation.setKeyValueAt(0.7, 80)\n        animation.setKeyValueAt(1, self.progressbar.maximum())\n        animation.start(animation.DeleteWhenStopped)\n\n\nif __name__ == '__main__':\n    import sys\n    from PyQt5.QtWidgets import QApplication\n    app = QApplication(sys.argv)\n    w = Window()\n    w.show()\n    sys.exit(app.exec_())\n\n```","categories":[{"name":"笔记","path":"api/categories/笔记.json"}],"tags":[{"name":"PyQt","path":"api/tags/PyQt.json"},{"name":"动画","path":"api/tags/动画.json"}]}