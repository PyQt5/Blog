{"author":"人间白头　","title":"python 状态机模块 　","slug":"python_statemachine","date":"2019-07-17 17:03:33","updated":"2019-10-21T15:46:10.228Z","comments":true,"path":"api/articles/python_statemachine.json","url":"https://pyqt5.com/python_statemachine.html","excerpt":"用状态来取代if…else判断。","covers":null,"content":"<p>用状态来取代if…else判断。</p>\n<a id=\"more\"></a>\n<p>GUI涉及到挺多的状态改变 , 以前一直用 if…else 来判断 , 最近读了设计模式 ,发现有个状态模式 , 随后发现了状态机这个东西 .</p>\n<p>python的状态机模块挺多的 , 不过好像很多都不更新了.<br>推荐2个状态机模块 , 但是也没有太深入的使用经验 , 就跑跑例子 , 以后有更详细的pyqt例子再补上 .</p>\n<p>1: <code>pip install python-statemachine</code></p>\n<p>官方例子 : <a href=\"https://github.com/fgmacedo/python-statemachine\" target=\"_blank\" rel=\"noopener\">https://github.com/fgmacedo/python-statemachine</a></p>\n<p>2.<code>pip install state_machine</code></p>\n<p>官方例子 : <a href=\"https://github.com/jtushman/state_machine\" target=\"_blank\" rel=\"noopener\">https://github.com/jtushman/state_machine</a></p>\n<p>1的 最近一次更新在6个月以前 , 使用<code>类继承</code>和<code>mixin</code>方式 , 不过有些地方不如2个人性化;</p>\n<p>2的设计更人性化一些 , 包括状态改变<code>before</code>和 <code>after</code> , 不过由于是装饰器实现的动态增加属性 , 有些地方编辑器智能提示可能就靠不上了.</p>\n<p>两者实现实现方式不一样 , 有兴趣可以读读源码 .</p>\n<ol start=\"3\">\n<li>qt内置状态机框架</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/amnes1a/article/details/62418196\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/amnes1a/article/details/62418196</a></p>\n<p><a href=\"https://blog.csdn.net/dongfenghuojian/article/details/78187131\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/dongfenghuojian/article/details/78187131</a></p>\n<p><a href=\"http://blog.sina.com.cn/s/articlelist_3284623693_0_1.html\" target=\"_blank\" rel=\"noopener\">http://blog.sina.com.cn/s/articlelist_3284623693_0_1.html</a> (系列教程)    </p>\n","raw":"---\nauthor: 人间白头　\ntitle: python 状态机模块 　\ndate: 2019-7-17 17:03:33\ntop: 1\ntags:\n - Python\n - python 状态机\n \ncategories: 随笔\n---\n\n用状态来取代if...else判断。\n\n<!-- more -->\n\nGUI涉及到挺多的状态改变 , 以前一直用 if...else 来判断 , 最近读了设计模式 ,发现有个状态模式 , 随后发现了状态机这个东西 .\n\npython的状态机模块挺多的 , 不过好像很多都不更新了.\n推荐2个状态机模块 , 但是也没有太深入的使用经验 , 就跑跑例子 , 以后有更详细的pyqt例子再补上 .\n\n1: `pip install python-statemachine`\n\n官方例子 : [https://github.com/fgmacedo/python-statemachine](https://github.com/fgmacedo/python-statemachine)\n\n2.`pip install state_machine`\n\n官方例子 : [https://github.com/jtushman/state_machine](https://github.com/jtushman/state_machine)\n\n1的 最近一次更新在6个月以前 , 使用`类继承`和`mixin`方式 , 不过有些地方不如2个人性化;\n\n2的设计更人性化一些 , 包括状态改变`before`和 `after` , 不过由于是装饰器实现的动态增加属性 , 有些地方编辑器智能提示可能就靠不上了.\n\n两者实现实现方式不一样 , 有兴趣可以读读源码 .\n\n3. qt内置状态机框架\n\nhttps://blog.csdn.net/amnes1a/article/details/62418196\n\nhttps://blog.csdn.net/dongfenghuojian/article/details/78187131\n\nhttp://blog.sina.com.cn/s/articlelist_3284623693_0_1.html (系列教程)    \n","categories":[{"name":"随笔","path":"api/categories/随笔.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"},{"name":"python 状态机","path":"api/tags/python 状态机.json"}]}