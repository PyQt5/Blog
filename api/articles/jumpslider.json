{"author":"Irony","title":"PyQt5之QSlider滑动条点击定位","slug":"jumpslider","date":"2018-11-05 23:12:26","updated":"2019-12-26T11:54:14.175Z","comments":true,"path":"api/articles/jumpslider.json","url":"https://pyqt5.com/jumpslider.html","excerpt":"QSlider 在通常情况下支持鼠标点击可以任意拖动，或者鼠标点击则往鼠标点击的方向移动一小格，这种移动一小格通常情况下用起来很不方便，比如我要做一个播放器的播放进度条，肯定是点击某个位置就直接跳到该位置，为此需要对 QSlider 的鼠标事件mousePressEvent进行重写。<br>","covers":["https://github.com/PyQt5/PyQt/raw/master/QSlider/ScreenShot/ClickJumpSlider.gif"],"content":"<p><code>QSlider</code> 在通常情况下支持鼠标点击可以任意拖动，或者鼠标点击则往鼠标点击的方向移动一小格，这种移动一小格通常情况下用起来很不方便，比如我要做一个播放器的播放进度条，肯定是点击某个位置就直接跳到该位置，为此需要对 <code>QSlider</code> 的鼠标事件<code>mousePressEvent</code>进行重写。<br><a id=\"more\"></a></p>\n<h2 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h2><p>一般的想法就是重写<code>mousePressEvent</code>后，得到鼠标点击的x和y点然后进行比例换算，再通过<code>setValue</code>来设置值，其实<code>QSlider</code>的<code>style</code>里面是有一个<code>sliderValueFromPosition</code>方法来计算值的。直接调用这个方法即可。</p>\n<ol>\n<li>首先通过<code>QSlider.style().subControlRect</code>方法计算得到滑块的区域，当鼠标点击区域在此次时则交给系统自己处理（比如按住不放拖动）</li>\n<li>通过<code>orientation</code>判断滑动条的方向（横竖）</li>\n<li>通过<code>invertedAppearance</code>判断滑动条是否反向（左右、上下）</li>\n<li>通过<code>QSlider.style().sliderValueFromPosition(最小值, 最大值, x或者y坐标, 宽度或者高度)</code>来计算得到值</li>\n<li>最后通过<code>setValue</code>来设置值</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p><a href=\"https://github.com/PyQt5/PyQt/blob/master/QSlider/ClickJumpSlider.py\" target=\"_blank\" rel=\"noopener\">https://github.com/PyQt5/PyQt/blob/master/QSlider/ClickJumpSlider.py</a></p>\n<pre><code class=\"python\">#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n&quot;&quot;&quot;\nCreated on 2018年11月5日\n@author: Irony\n@site: https://pyqt5.com https://github.com/892768447\n@email: 892768447@qq.com\n@file: JumpSlider\n@description: \n&quot;&quot;&quot;\nfrom PyQt5.QtCore import Qt\nfrom PyQt5.QtWidgets import QSlider, QStyleOptionSlider, QStyle, QWidget,\\\n    QFormLayout, QLabel\n\n\n__Author__ = &quot;&quot;&quot;By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com&quot;&quot;&quot;\n__Copyright__ = &quot;Copyright (c) 2018 Irony&quot;\n__Version__ = &quot;Version 1.0&quot;\n\n\nclass JumpSlider(QSlider):\n\n    def mousePressEvent(self, event):\n        # 获取上面的拉动块位置\n        option = QStyleOptionSlider()\n        self.initStyleOption(option)\n        rect = self.style().subControlRect(\n            QStyle.CC_Slider, option, QStyle.SC_SliderHandle, self)\n        if rect.contains(event.pos()):\n            # 如果鼠标点击的位置在滑块上则交给Qt自行处理\n            super(JumpSlider, self).mousePressEvent(event)\n            return\n        if self.orientation() == Qt.Horizontal:\n            # 横向，要考虑invertedAppearance是否反向显示的问题\n            self.setValue(self.style().sliderValueFromPosition(\n                self.minimum(), self.maximum(),\n                event.x() if not self.invertedAppearance() else (self.width(\n                ) - event.x()), self.width()))\n        else:\n            # 纵向\n            self.setValue(self.style().sliderValueFromPosition(\n                self.minimum(), self.maximum(),\n                (self.height() - event.y()) if not self.invertedAppearance(\n                ) else event.y(), self.height()))\n\n\nclass TestWindow(QWidget):\n\n    def __init__(self, *args, **kwargs):\n        super(TestWindow, self).__init__(*args, **kwargs)\n        layout = QFormLayout(self)\n\n        self.label1 = QLabel(&#39;0&#39;, self)\n        layout.addRow(self.label1, JumpSlider(\n            Qt.Horizontal, valueChanged=lambda v: self.label1.setText(str(v))))\n\n        # 横向-反向显示\n        self.label2 = QLabel(&#39;0&#39;, self)\n        layout.addRow(self.label2, JumpSlider(\n            Qt.Horizontal, invertedAppearance=True,\n            valueChanged=lambda v: self.label2.setText(str(v))))\n\n        self.label3 = QLabel(&#39;0&#39;, self)\n        layout.addRow(self.label3, JumpSlider(\n            Qt.Vertical, minimumHeight=200, valueChanged=lambda v: self.label3.setText(str(v))))\n\n        # 纵向反向显示\n        self.label4 = QLabel(&#39;0&#39;, self)\n        layout.addRow(self.label4, JumpSlider(\n            Qt.Vertical, invertedAppearance=True,\n            minimumHeight=200, valueChanged=lambda v: self.label4.setText(str(v))))\n\n\nif __name__ == &#39;__main__&#39;:\n    import sys\n    import cgitb\n    sys.excepthook = cgitb.enable(1, None, 5, &#39;&#39;)\n    from PyQt5.QtWidgets import QApplication\n    app = QApplication(sys.argv)\n    w = TestWindow()\n    w.show()\n    sys.exit(app.exec_())\n</code></pre>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"https://github.com/PyQt5/PyQt/raw/master/QSlider/ScreenShot/ClickJumpSlider.gif\" alt=\"ClickJumpSlider\"></p>\n","raw":"---\nauthor: Irony\ntitle: PyQt5之QSlider滑动条点击定位\ndate: 2018-11-05 23:12:26\ntop: 1\ntags: \n - PyQt\n - 滑动条\ncategories: 例子\n---\n\n`QSlider` 在通常情况下支持鼠标点击可以任意拖动，或者鼠标点击则往鼠标点击的方向移动一小格，这种移动一小格通常情况下用起来很不方便，比如我要做一个播放器的播放进度条，肯定是点击某个位置就直接跳到该位置，为此需要对 `QSlider` 的鼠标事件`mousePressEvent`进行重写。\n<!-- more -->\n\n## 实现方法\n\n一般的想法就是重写`mousePressEvent`后，得到鼠标点击的x和y点然后进行比例换算，再通过`setValue`来设置值，其实`QSlider`的`style`里面是有一个`sliderValueFromPosition`方法来计算值的。直接调用这个方法即可。\n\n1. 首先通过`QSlider.style().subControlRect`方法计算得到滑块的区域，当鼠标点击区域在此次时则交给系统自己处理（比如按住不放拖动）\n2. 通过`orientation`判断滑动条的方向（横竖）\n3. 通过`invertedAppearance`判断滑动条是否反向（左右、上下）\n4. 通过`QSlider.style().sliderValueFromPosition(最小值, 最大值, x或者y坐标, 宽度或者高度)`来计算得到值\n5. 最后通过`setValue`来设置值\n\n## 代码\n\nhttps://github.com/PyQt5/PyQt/blob/master/QSlider/ClickJumpSlider.py\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nCreated on 2018年11月5日\n@author: Irony\n@site: https://pyqt5.com https://github.com/892768447\n@email: 892768447@qq.com\n@file: JumpSlider\n@description: \n\"\"\"\nfrom PyQt5.QtCore import Qt\nfrom PyQt5.QtWidgets import QSlider, QStyleOptionSlider, QStyle, QWidget,\\\n    QFormLayout, QLabel\n\n\n__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\n\n\nclass JumpSlider(QSlider):\n\n    def mousePressEvent(self, event):\n        # 获取上面的拉动块位置\n        option = QStyleOptionSlider()\n        self.initStyleOption(option)\n        rect = self.style().subControlRect(\n            QStyle.CC_Slider, option, QStyle.SC_SliderHandle, self)\n        if rect.contains(event.pos()):\n            # 如果鼠标点击的位置在滑块上则交给Qt自行处理\n            super(JumpSlider, self).mousePressEvent(event)\n            return\n        if self.orientation() == Qt.Horizontal:\n            # 横向，要考虑invertedAppearance是否反向显示的问题\n            self.setValue(self.style().sliderValueFromPosition(\n                self.minimum(), self.maximum(),\n                event.x() if not self.invertedAppearance() else (self.width(\n                ) - event.x()), self.width()))\n        else:\n            # 纵向\n            self.setValue(self.style().sliderValueFromPosition(\n                self.minimum(), self.maximum(),\n                (self.height() - event.y()) if not self.invertedAppearance(\n                ) else event.y(), self.height()))\n\n\nclass TestWindow(QWidget):\n\n    def __init__(self, *args, **kwargs):\n        super(TestWindow, self).__init__(*args, **kwargs)\n        layout = QFormLayout(self)\n\n        self.label1 = QLabel('0', self)\n        layout.addRow(self.label1, JumpSlider(\n            Qt.Horizontal, valueChanged=lambda v: self.label1.setText(str(v))))\n\n        # 横向-反向显示\n        self.label2 = QLabel('0', self)\n        layout.addRow(self.label2, JumpSlider(\n            Qt.Horizontal, invertedAppearance=True,\n            valueChanged=lambda v: self.label2.setText(str(v))))\n\n        self.label3 = QLabel('0', self)\n        layout.addRow(self.label3, JumpSlider(\n            Qt.Vertical, minimumHeight=200, valueChanged=lambda v: self.label3.setText(str(v))))\n\n        # 纵向反向显示\n        self.label4 = QLabel('0', self)\n        layout.addRow(self.label4, JumpSlider(\n            Qt.Vertical, invertedAppearance=True,\n            minimumHeight=200, valueChanged=lambda v: self.label4.setText(str(v))))\n\n\nif __name__ == '__main__':\n    import sys\n    import cgitb\n    sys.excepthook = cgitb.enable(1, None, 5, '')\n    from PyQt5.QtWidgets import QApplication\n    app = QApplication(sys.argv)\n    w = TestWindow()\n    w.show()\n    sys.exit(app.exec_())\n```\n\n## 效果图\n\n![ClickJumpSlider](https://github.com/PyQt5/PyQt/raw/master/QSlider/ScreenShot/ClickJumpSlider.gif)\n\n","categories":[{"name":"例子","path":"api/categories/例子.json"}],"tags":[{"name":"PyQt","path":"api/tags/PyQt.json"},{"name":"滑动条","path":"api/tags/滑动条.json"}]}