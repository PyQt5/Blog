{"author":"不许人间见白头","title":"QDataWidgetMapper 数据库绑定 QLineEdit控件","slug":"datawidgetmapper","date":"2018-10-29 16:17:59","updated":"2020-02-21T15:22:17.963Z","comments":true,"path":"api/articles/datawidgetmapper.json","url":"https://pyqt5.com/datawidgetmapper.html","excerpt":"qt为操作数据库提供了一个model+view的模式 , 这样简单的出入库逻辑就不需要自己编写。QDataWidgetMapper 可以 将数据库的数据 映射到其他控件 。注意: 表格里的数据修改 还没有提交到数据库 , 需要点击提交按钮才生效。<br>","covers":["/images/datawidgetmapper.gif"],"content":"<p>qt为操作数据库提供了一个model+view的模式 , 这样简单的出入库逻辑就不需要自己编写。</p>\n<p><code>QDataWidgetMapper</code> 可以 将数据库的数据 映射到其他控件 。</p>\n<p>注意: 表格里的数据修改 还没有提交到数据库 , 需要点击提交按钮才生效。<br><a id=\"more\"></a></p>\n<p><a href=\"https://github.com/PyQt5/PyQt/tree/master/Test/partner_625781186/16_sqlModel/01_mapper\" target=\"_blank\" rel=\"noopener\">https://github.com/PyQt5/PyQt/tree/master/Test/partner_625781186/16_sqlModel/01_mapper</a></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"python\">#-*- coding: utf-8 -*-\n\nfrom PyQt5 import  QtWidgets, QtGui, QtCore\nfrom PyQt5.QtCore import *\nfrom PyQt5.QtGui import *\nfrom PyQt5.QtWidgets import *\nfrom PyQt5.QtSql import *\n\nimport sys\n\nsys.path.append(&#39;./ui&#39;)\nfrom Ui_MainWindow import Ui_MainWindow\n\n\nclass MainWindow(QMainWindow, Ui_MainWindow):\n    def __init__(self, parent=None, *args):\n\n        super(MainWindow, self).__init__(parent,  *args)\n        self.setupUi(self)\n        self.resize(800,600)\n\n        #===============================   db   ======================================#\n        # self.db = QSqlDatabase.addDatabase(&#39;QMYSQL&#39;)\n        # self.db.setHostName(&quot;127.0.0.1&quot;)  # set address\n        # self.db.setUserName(&quot;root&quot;)  # set user name\n        # self.db.setPassword(&#39;123456&#39;)  # set user pwd   \n        # self.db.setDatabaseName(&quot;database&quot;)\n\n        self.db = QSqlDatabase.addDatabase(&#39;QSQLITE&#39;)\n        self.db.setDatabaseName(&#39;./db/database.db&#39;)\n\n        #================================= codemodel =====================================#\n        # 实例化model\n        self.codeModel = QSqlRelationalTableModel()\n        # model设置表\n        self.initializeModel(self.codeModel, &#39;Mongo&#39;)\n        # 设置编辑策略\n        # self.codeModel.setEditStrategy(QSqlTableModel.OnFieldChange)\n        # !!! 这里要注意 , 只能用这个策略 , 才可以实现自动提交\n        self.codeModel.setEditStrategy(QSqlTableModel.OnManualSubmit)\n\n        self.codeView = self.createView(&quot;code_View&quot;, self.codeModel)\n        self.verticalLayout.addWidget(self.codeView)  \n\n        #================================ initData ==================================#\n        # 数据映射\n        self.mapper = QDataWidgetMapper()\n        # 提交策略\n        self.mapper.setSubmitPolicy(QDataWidgetMapper.AutoSubmit)\n        # 映射的模型源\n        self.mapper.setModel(self.codeModel)\n        self.mapper.addMapping(self.l1,0)\n        self.mapper.addMapping(self.l2,1)\n        self.mapper.addMapping(self.l3,2)\n        self.mapper.addMapping(self.l4,3)\n        self.mapper.addMapping(self.l5,4)\n\n        self.mapper.toFirst()\n\n        #================================ pushButton ==================================#\n        self.sub_btn.clicked.connect(self.mapper.submit)\n        self.sub_btn.clicked.connect(self.codeModel.submitAll)\n        self.pre_btn.clicked.connect(self.mapper.toPrevious)\n        self.next_btn.clicked.connect(self.mapper.toNext)\n\n    def initializeModel(self, model, tablename):\n        &#39;&#39;&#39;重关联。&#39;&#39;&#39;\n        model.setTable(tablename)\n#        model.setEditStrategy(QSqlTableModel.OnRowChange)\n        model.select()\n\n    def createView(self, title, model):\n        &#39;&#39;&#39;创建TableView视图&#39;&#39;&#39;\n        view =  QTableView()\n        view.setModel(model)\n        view.setWindowTitle(title)\n        #列宽设置\n        view.horizontalHeader().setSectionResizeMode(3)\n        #行高设置\n        view.verticalHeader().setSectionResizeMode(1)\n        #充满列宽\n        view.horizontalHeader().setStretchLastSection(True) \n#        view.verticalHeader().setVisible(False)#隐藏行标题\n        #标题左对齐\n        view.horizontalHeader().setDefaultAlignment(Qt.AlignLeft)\n        #标题左对齐\n        view.verticalHeader().setDefaultAlignment(Qt.AlignLeft)\n\n        return view  \n\n\nif __name__ == &quot;__main__&quot;:\n    import sys\n\n    app = QApplication(sys.argv)\n    app.setStyle(QStyleFactory.create(&quot;Fusion&quot;))\n    ui = MainWindow()\n    ui.show()\n    sys.exit(app.exec_())\n</code></pre>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"/images/datawidgetmapper.gif\" alt=\"datawidgetmapper\"></p>\n","raw":"---\nauthor: 不许人间见白头\ntitle: QDataWidgetMapper 数据库绑定 QLineEdit控件\ndate: 2018-10-29 16:17:59\ntop: 1\ntags: \n - PyQt\n - Model\ncategories: 例子\n---\n\nqt为操作数据库提供了一个model+view的模式 , 这样简单的出入库逻辑就不需要自己编写。\n\n`QDataWidgetMapper` 可以 将数据库的数据 映射到其他控件 。\n\n注意: 表格里的数据修改 还没有提交到数据库 , 需要点击提交按钮才生效。\n<!-- more -->\n\nhttps://github.com/PyQt5/PyQt/tree/master/Test/partner_625781186/16_sqlModel/01_mapper\n\n## 代码\n\n```python\n#-*- coding: utf-8 -*-\n\nfrom PyQt5 import  QtWidgets, QtGui, QtCore\nfrom PyQt5.QtCore import *\nfrom PyQt5.QtGui import *\nfrom PyQt5.QtWidgets import *\nfrom PyQt5.QtSql import *\n\nimport sys\n\nsys.path.append('./ui')\nfrom Ui_MainWindow import Ui_MainWindow\n\n\nclass MainWindow(QMainWindow, Ui_MainWindow):\n    def __init__(self, parent=None, *args):\n\n        super(MainWindow, self).__init__(parent,  *args)\n        self.setupUi(self)\n        self.resize(800,600)\n        \n        #===============================   db   ======================================#\n        # self.db = QSqlDatabase.addDatabase('QMYSQL')\n        # self.db.setHostName(\"127.0.0.1\")  # set address\n        # self.db.setUserName(\"root\")  # set user name\n        # self.db.setPassword('123456')  # set user pwd   \n        # self.db.setDatabaseName(\"database\")\n        \n        self.db = QSqlDatabase.addDatabase('QSQLITE')\n        self.db.setDatabaseName('./db/database.db')\n\n        #================================= codemodel =====================================#\n        # 实例化model\n        self.codeModel = QSqlRelationalTableModel()\n        # model设置表\n        self.initializeModel(self.codeModel, 'Mongo')\n        # 设置编辑策略\n        # self.codeModel.setEditStrategy(QSqlTableModel.OnFieldChange)\n        # !!! 这里要注意 , 只能用这个策略 , 才可以实现自动提交\n        self.codeModel.setEditStrategy(QSqlTableModel.OnManualSubmit)\n\n        self.codeView = self.createView(\"code_View\", self.codeModel)\n        self.verticalLayout.addWidget(self.codeView)  \n\n        #================================ initData ==================================#\n        # 数据映射\n        self.mapper = QDataWidgetMapper()\n        # 提交策略\n        self.mapper.setSubmitPolicy(QDataWidgetMapper.AutoSubmit)\n        # 映射的模型源\n        self.mapper.setModel(self.codeModel)\n        self.mapper.addMapping(self.l1,0)\n        self.mapper.addMapping(self.l2,1)\n        self.mapper.addMapping(self.l3,2)\n        self.mapper.addMapping(self.l4,3)\n        self.mapper.addMapping(self.l5,4)\n\n        self.mapper.toFirst()\n        \n        #================================ pushButton ==================================#\n        self.sub_btn.clicked.connect(self.mapper.submit)\n        self.sub_btn.clicked.connect(self.codeModel.submitAll)\n        self.pre_btn.clicked.connect(self.mapper.toPrevious)\n        self.next_btn.clicked.connect(self.mapper.toNext)\n        \n    def initializeModel(self, model, tablename):\n        '''重关联。'''\n        model.setTable(tablename)\n#        model.setEditStrategy(QSqlTableModel.OnRowChange)\n        model.select()\n        \n    def createView(self, title, model):\n        '''创建TableView视图'''\n        view =  QTableView()\n        view.setModel(model)\n        view.setWindowTitle(title)\n        #列宽设置\n        view.horizontalHeader().setSectionResizeMode(3)\n        #行高设置\n        view.verticalHeader().setSectionResizeMode(1)\n        #充满列宽\n        view.horizontalHeader().setStretchLastSection(True) \n#        view.verticalHeader().setVisible(False)#隐藏行标题\n        #标题左对齐\n        view.horizontalHeader().setDefaultAlignment(Qt.AlignLeft)\n        #标题左对齐\n        view.verticalHeader().setDefaultAlignment(Qt.AlignLeft)\n        \n        return view  \n    \n\nif __name__ == \"__main__\":\n    import sys\n    \n    app = QApplication(sys.argv)\n    app.setStyle(QStyleFactory.create(\"Fusion\"))\n    ui = MainWindow()\n    ui.show()\n    sys.exit(app.exec_())\n```\n\n## 效果图\n\n![datawidgetmapper](/images/datawidgetmapper.gif)\n\n","categories":[{"name":"例子","path":"api/categories/例子.json"}],"tags":[{"name":"PyQt","path":"api/tags/PyQt.json"},{"name":"Model","path":"api/tags/Model.json"}]}