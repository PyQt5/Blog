{"author":"Irony","title":"PyQt5菜单之多选功能","slug":"mselectmenu","date":"2018-10-25 09:53:34","updated":"2020-02-21T15:24:35.837Z","comments":true,"path":"api/articles/mselectmenu.json","url":"https://pyqt5.com/mselectmenu.html","excerpt":"有时候会遇到这种需求：在界面某个位置弹出一个菜单，其中里面的菜单项可以多选（类似配置选项），此时用QMenu会遇到点击一个菜单项就会自动关闭，当然可以通过其他方式实现该功能，不过这里就采用QMenu通过特殊的方式来实现该需求。<br>","covers":["https://github.com/PyQt5/PyQt/raw/master/QMenu/ScreenShot/MultiSelect.gif"],"content":"<p>有时候会遇到这种需求：在界面某个位置弹出一个菜单，其中里面的菜单项可以多选（类似配置选项），此时用<code>QMenu</code>会遇到点击一个菜单项就会自动关闭，当然可以通过其他方式实现该功能，不过这里就采用<code>QMenu</code>通过特殊的方式来实现该需求。<br><a id=\"more\"></a></p>\n<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>要实现的效果：</p>\n<ol>\n<li>菜单1</li>\n<li>菜单2</li>\n<li>菜单3</li>\n<li>菜单4</li>\n</ol>\n<p>点击菜单1、2、3可以多选不关闭菜单</p>\n<p>点击菜单4可以勾选，并且关闭菜单</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><ol>\n<li>设置菜单项可勾选：通过<code>QAction.setCheckable(True)</code>方法实现</li>\n<li>设置菜单不可关闭：通过覆盖QMenu的鼠标释放<code>mouseReleaseEvent</code>方法（可直接替换或者通过<code>installEventFilter</code>安装事件过滤器实现）</li>\n<li>在菜单的鼠标释放事件中，当点击菜单项后是通过点击点坐标来查找是否有<code>QAction</code>，然后触发对应的<code>QAction</code>。</li>\n<li>故在没有<code>QAction</code>的地方则直接交还给<code>QMenu</code>自行处理逻辑，在有<code>QAction</code>的地方可以根据自己的需求进行处理（如上所提）</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"python\">#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n&quot;&quot;&quot;\nCreated on 2018年10月24日\n@author: Irony\n@site: https://github.com/892768447\n@email: 892768447@qq.com\n@file: 菜单多选不关闭\n@description: \n&quot;&quot;&quot;\nfrom PyQt5.QtWidgets import QWidget, QVBoxLayout, QLabel, QPushButton, QMenu,\\\n    QAction\n\n\n__Author__ = &quot;&quot;&quot;By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com&quot;&quot;&quot;\n__Copyright__ = &quot;Copyright (c) 2018 Irony&quot;\n__Version__ = &quot;Version 1.0&quot;\n\n\nclass Window(QWidget):\n\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.labelInfo = QLabel(self)\n        self.button = QPushButton(&#39;带按钮的菜单&#39;, self)\n        layout.addWidget(self.labelInfo)\n        layout.addWidget(self.button)\n\n        # 添加菜单\n        self._initMenu()\n\n    def _initMenu(self):\n        # 创建菜单\n        self._menu = QMenu(self.button)\n        # 替换menu的鼠标释放事件达到选择性不关闭菜单\n        self._menu.mouseReleaseEvent = self._menu_mouseReleaseEvent\n        self._menu.addAction(&#39;菜单1&#39;, self._checkAction)\n        self._menu.addAction(&#39;菜单2&#39;, self._checkAction)\n        self._menu.addAction(\n            QAction(&#39;菜单3&#39;, self._menu, triggered=self._checkAction))\n        action = QAction(&#39;菜单4&#39;, self._menu, triggered=self._checkAction)\n        # 添加自定义的属性,判断该属性可以关闭菜单\n        action.setProperty(&#39;canHide&#39;, True)\n        self._menu.addAction(action)\n        for action in self._menu.actions():\n            # 循环设置可勾选\n            action.setCheckable(True)\n        self.button.setMenu(self._menu)\n\n    def _menu_mouseReleaseEvent(self, event):\n        action = self._menu.actionAt(event.pos())\n        if not action:\n            # 没有找到action就交给QMenu自己处理\n            return QMenu.mouseReleaseEvent(self._menu, event)\n        if action.property(&#39;canHide&#39;):  # 如果有该属性则给菜单自己处理\n            return QMenu.mouseReleaseEvent(self._menu, event)\n        # 找到了QAction则只触发Action\n        action.activate(action.Trigger)\n\n    def _checkAction(self):\n        # 三个action都响应该函数\n        self.labelInfo.setText(&#39;\\n&#39;.join([&#39;{}\\t选中：{}&#39;.format(\n            action.text(), action.isChecked()) for action in self._menu.actions()]))\n\n\nif __name__ == &#39;__main__&#39;:\n    import sys\n    import cgitb\n    sys.excepthook = cgitb.enable(1, None, 5, &#39;text&#39;)\n    from PyQt5.QtWidgets import QApplication\n    app = QApplication(sys.argv)\n    w = Window()\n    w.resize(400, 400)\n    w.show()\n    sys.exit(app.exec_())\n</code></pre>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"https://github.com/PyQt5/PyQt/raw/master/QMenu/ScreenShot/MultiSelect.gif\" alt=\"MultiSelect\"></p>\n","raw":"---\nauthor: Irony\ntitle: PyQt5菜单之多选功能\ndate: 2018-10-25 09:53:34\ntop: 1\ntags: \n - PyQt\n - 菜单\ncategories: 例子\n---\n\n有时候会遇到这种需求：在界面某个位置弹出一个菜单，其中里面的菜单项可以多选（类似配置选项），此时用`QMenu`会遇到点击一个菜单项就会自动关闭，当然可以通过其他方式实现该功能，不过这里就采用`QMenu`通过特殊的方式来实现该需求。\n<!-- more -->\n\n## 需求\n\n要实现的效果：\n\n1. 菜单1\n2. 菜单2\n3. 菜单3\n4. 菜单4\n\n点击菜单1、2、3可以多选不关闭菜单\n\n点击菜单4可以勾选，并且关闭菜单\n\n## 原理\n\n1. 设置菜单项可勾选：通过`QAction.setCheckable(True)`方法实现\n2. 设置菜单不可关闭：通过覆盖QMenu的鼠标释放`mouseReleaseEvent`方法（可直接替换或者通过`installEventFilter`安装事件过滤器实现）\n3. 在菜单的鼠标释放事件中，当点击菜单项后是通过点击点坐标来查找是否有`QAction`，然后触发对应的`QAction`。\n4. 故在没有`QAction`的地方则直接交还给`QMenu`自行处理逻辑，在有`QAction`的地方可以根据自己的需求进行处理（如上所提）\n\n## 代码\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nCreated on 2018年10月24日\n@author: Irony\n@site: https://github.com/892768447\n@email: 892768447@qq.com\n@file: 菜单多选不关闭\n@description: \n\"\"\"\nfrom PyQt5.QtWidgets import QWidget, QVBoxLayout, QLabel, QPushButton, QMenu,\\\n    QAction\n\n\n__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\n\n\nclass Window(QWidget):\n\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.labelInfo = QLabel(self)\n        self.button = QPushButton('带按钮的菜单', self)\n        layout.addWidget(self.labelInfo)\n        layout.addWidget(self.button)\n\n        # 添加菜单\n        self._initMenu()\n\n    def _initMenu(self):\n        # 创建菜单\n        self._menu = QMenu(self.button)\n        # 替换menu的鼠标释放事件达到选择性不关闭菜单\n        self._menu.mouseReleaseEvent = self._menu_mouseReleaseEvent\n        self._menu.addAction('菜单1', self._checkAction)\n        self._menu.addAction('菜单2', self._checkAction)\n        self._menu.addAction(\n            QAction('菜单3', self._menu, triggered=self._checkAction))\n        action = QAction('菜单4', self._menu, triggered=self._checkAction)\n        # 添加自定义的属性,判断该属性可以关闭菜单\n        action.setProperty('canHide', True)\n        self._menu.addAction(action)\n        for action in self._menu.actions():\n            # 循环设置可勾选\n            action.setCheckable(True)\n        self.button.setMenu(self._menu)\n\n    def _menu_mouseReleaseEvent(self, event):\n        action = self._menu.actionAt(event.pos())\n        if not action:\n            # 没有找到action就交给QMenu自己处理\n            return QMenu.mouseReleaseEvent(self._menu, event)\n        if action.property('canHide'):  # 如果有该属性则给菜单自己处理\n            return QMenu.mouseReleaseEvent(self._menu, event)\n        # 找到了QAction则只触发Action\n        action.activate(action.Trigger)\n\n    def _checkAction(self):\n        # 三个action都响应该函数\n        self.labelInfo.setText('\\n'.join(['{}\\t选中：{}'.format(\n            action.text(), action.isChecked()) for action in self._menu.actions()]))\n\n\nif __name__ == '__main__':\n    import sys\n    import cgitb\n    sys.excepthook = cgitb.enable(1, None, 5, 'text')\n    from PyQt5.QtWidgets import QApplication\n    app = QApplication(sys.argv)\n    w = Window()\n    w.resize(400, 400)\n    w.show()\n    sys.exit(app.exec_())\n```\n\n## 效果图\n\n![MultiSelect](https://github.com/PyQt5/PyQt/raw/master/QMenu/ScreenShot/MultiSelect.gif)","categories":[{"name":"例子","path":"api/categories/例子.json"}],"tags":[{"name":"PyQt","path":"api/tags/PyQt.json"},{"name":"菜单","path":"api/tags/菜单.json"}]}