{"author":"Irony","title":"PyQt5动画边框阴影","slug":"animateshadow","date":"2018-09-25 23:38:12","updated":"2019-10-21T14:49:04.002Z","comments":true,"path":"api/articles/animateshadow.json","url":"https://pyqt5.com/animateshadow.html","excerpt":"为子控件增加动画阴影效果，结合QGraphicsDropShadowEffect和QPropertyAnimation动态改变阴影半径达到效果，在旧版本的Qt中QGraphicsDropShadowEffect可能会有点问题（父控件会影响子控件）<br>","covers":["https://github.com/PyQt5/PyQt/raw/master/QGraphicsDropShadowEffect/ScreenShot/ShadowEffect.gif"],"content":"<p>为子控件增加动画阴影效果，结合<code>QGraphicsDropShadowEffect</code>和<code>QPropertyAnimation</code>动态改变阴影半径达到效果，在旧版本的Qt中<code>QGraphicsDropShadowEffect</code>可能会有点问题（父控件会影响子控件）<br><a id=\"more\"></a></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>原理是利用QGraphicsDropShadowEffect添加边框阴影，然后使用动画不停改变阴影的模糊半径来达到效果，如图：</p>\n<p><img src=\"https://github.com/PyQt5/PyQt/raw/master/QGraphicsDropShadowEffect/ScreenShot/ShadowEffect.gif\" alt=\"ShadowEffect\"></p>\n<h2 id=\"简单说明\"><a href=\"#简单说明\" class=\"headerlink\" title=\"简单说明\"></a>简单说明</h2><ol>\n<li>继承<code>QGraphicsDropShadowEffect</code>增加动态属性<code>radius</code></li>\n<li>通过<code>setGraphicsEffect</code>方法设置控件的边框阴影</li>\n<li>通过<code>QPropertyAnimation</code>属性动画不断改变<code>radius</code>的值并调用<code>setBlurRadius</code>更新半径值</li>\n</ol>\n<p><a href=\"https://github.com/PyQt5/PyQt/blob/master/QGraphicsDropShadowEffect/ShadowEffect.py\" target=\"_blank\" rel=\"noopener\">https://github.com/PyQt5/PyQt/blob/master/QGraphicsDropShadowEffect/ShadowEffect.py</a></p>\n<h2 id=\"自定义类\"><a href=\"#自定义类\" class=\"headerlink\" title=\"自定义类\"></a>自定义类</h2><pre><code class=\"python\">#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n&quot;&quot;&quot;\nCreated on 2018年9月25日\n@author: Irony\n@site: https://pyqt5.com, https://github.com/892768447\n@email: 892768447@qq.com\n@file: AnimationShadowEffect\n@description: 边框动画阴影动画\n&quot;&quot;&quot;\nfrom PyQt5.QtCore import QPropertyAnimation, pyqtProperty\nfrom PyQt5.QtWidgets import QGraphicsDropShadowEffect\n\n\n__Author__ = &quot;&quot;&quot;By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com&quot;&quot;&quot;\n__Copyright__ = &#39;Copyright (c) 2018 Irony&#39;\n__Version__ = 1.0\n\n\nclass AnimationShadowEffect(QGraphicsDropShadowEffect):\n\n    def __init__(self, color, *args, **kwargs):\n        super(AnimationShadowEffect, self).__init__(*args, **kwargs)\n        self.setColor(color)\n        self.setOffset(0, 0)\n        self.setBlurRadius(0)\n        self._radius = 0\n        self.animation = QPropertyAnimation(self)\n        self.animation.setTargetObject(self)\n        self.animation.setDuration(2000)  # 一次循环时间\n        self.animation.setLoopCount(-1)  # 永久循环\n        self.animation.setPropertyName(b&#39;radius&#39;)\n        # 插入线行值\n        self.animation.setKeyValueAt(0, 1)\n        self.animation.setKeyValueAt(0.5, 30)\n        self.animation.setKeyValueAt(1, 1)\n\n    def start(self):\n        self.animation.start()\n\n    @pyqtProperty(int)\n    def radius(self):\n        return self._radius\n\n    @radius.setter\n    def radius(self, r):\n        self._radius = r\n        self.setBlurRadius(r)\n</code></pre>\n<h2 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h2><pre><code class=\"python\">#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n&quot;&quot;&quot;\nCreated on 2018年9月25日\n@author: Irony\n@site: https://pyqt5.com, https://github.com/892768447\n@email: 892768447@qq.com\n@file: Test\n@description: \n&quot;&quot;&quot;\nfrom PyQt5.QtCore import Qt\nfrom PyQt5.QtGui import QPixmap\nfrom PyQt5.QtWidgets import QWidget, QHBoxLayout, QLabel, QPushButton, QLineEdit\n\nfrom AnimationShadowEffect import AnimationShadowEffect  # @UnresolvedImport\n\n\n__Author__ = &quot;&quot;&quot;By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com&quot;&quot;&quot;\n__Copyright__ = &#39;Copyright (c) 2018 Irony&#39;\n__Version__ = 1.0\n\n\nclass Window(QWidget):\n\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n\n        # 绿色边框\n        labelGreen = QLabel(self, pixmap=QPixmap(&#39;1.jpg&#39;).scaled(100, 100))\n        layout.addWidget(labelGreen)\n        aniGreen = AnimationShadowEffect(Qt.darkGreen, labelGreen)\n        labelGreen.setGraphicsEffect(aniGreen)\n        aniGreen.start()\n\n        # 红色边框,圆形图片\n        labelRed = QLabel(self)\n        labelRed.setMinimumSize(100, 100)\n        labelRed.setMaximumSize(100, 100)\n        labelRed.setStyleSheet(&#39;border-image: url(1.jpg);border-radius: 50px;&#39;)\n        layout.addWidget(labelRed)\n        aniRed = AnimationShadowEffect(Qt.red, labelGreen)\n        labelRed.setGraphicsEffect(aniRed)\n        aniRed.start()\n\n        # 蓝色边框按钮\n        button = QPushButton(&#39;按钮&#39;, self)\n        aniButton = AnimationShadowEffect(Qt.blue, button)\n        layout.addWidget(button)\n        button.setGraphicsEffect(aniButton)\n        aniButton.start()\n\n        # 青色边框输入框\n        lineedit = QLineEdit(self)\n        aniEdit = AnimationShadowEffect(Qt.cyan, lineedit)\n        layout.addWidget(lineedit)\n        lineedit.setGraphicsEffect(aniEdit)\n        aniEdit.start()\n\n\nif __name__ == &#39;__main__&#39;:\n    import sys\n    from PyQt5.QtWidgets import QApplication\n    app = QApplication(sys.argv)\n    w = Window()\n    w.show()\n    sys.exit(app.exec_())\n</code></pre>\n","raw":"---\nauthor: Irony\ntitle: PyQt5动画边框阴影\ndate: 2018-09-25 23:38:12\ntop: 1\ntags: \n - PyQt\n - 动画\n - 阴影\ncategories: 例子\n---\n\n为子控件增加动画阴影效果，结合`QGraphicsDropShadowEffect`和`QPropertyAnimation`动态改变阴影半径达到效果，在旧版本的Qt中`QGraphicsDropShadowEffect`可能会有点问题（父控件会影响子控件）\n<!-- more -->\n\n## 原理\n\n原理是利用QGraphicsDropShadowEffect添加边框阴影，然后使用动画不停改变阴影的模糊半径来达到效果，如图：\n\n![ShadowEffect](https://github.com/PyQt5/PyQt/raw/master/QGraphicsDropShadowEffect/ScreenShot/ShadowEffect.gif)\n\n## 简单说明\n\n1. 继承`QGraphicsDropShadowEffect`增加动态属性`radius`\n2. 通过`setGraphicsEffect`方法设置控件的边框阴影\n3. 通过`QPropertyAnimation`属性动画不断改变`radius`的值并调用`setBlurRadius`更新半径值\n\nhttps://github.com/PyQt5/PyQt/blob/master/QGraphicsDropShadowEffect/ShadowEffect.py\n\n## 自定义类\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nCreated on 2018年9月25日\n@author: Irony\n@site: https://pyqt5.com, https://github.com/892768447\n@email: 892768447@qq.com\n@file: AnimationShadowEffect\n@description: 边框动画阴影动画\n\"\"\"\nfrom PyQt5.QtCore import QPropertyAnimation, pyqtProperty\nfrom PyQt5.QtWidgets import QGraphicsDropShadowEffect\n\n\n__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\n\n\nclass AnimationShadowEffect(QGraphicsDropShadowEffect):\n\n    def __init__(self, color, *args, **kwargs):\n        super(AnimationShadowEffect, self).__init__(*args, **kwargs)\n        self.setColor(color)\n        self.setOffset(0, 0)\n        self.setBlurRadius(0)\n        self._radius = 0\n        self.animation = QPropertyAnimation(self)\n        self.animation.setTargetObject(self)\n        self.animation.setDuration(2000)  # 一次循环时间\n        self.animation.setLoopCount(-1)  # 永久循环\n        self.animation.setPropertyName(b'radius')\n        # 插入线行值\n        self.animation.setKeyValueAt(0, 1)\n        self.animation.setKeyValueAt(0.5, 30)\n        self.animation.setKeyValueAt(1, 1)\n\n    def start(self):\n        self.animation.start()\n\n    @pyqtProperty(int)\n    def radius(self):\n        return self._radius\n\n    @radius.setter\n    def radius(self, r):\n        self._radius = r\n        self.setBlurRadius(r)\n```\n\n## 测试代码\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nCreated on 2018年9月25日\n@author: Irony\n@site: https://pyqt5.com, https://github.com/892768447\n@email: 892768447@qq.com\n@file: Test\n@description: \n\"\"\"\nfrom PyQt5.QtCore import Qt\nfrom PyQt5.QtGui import QPixmap\nfrom PyQt5.QtWidgets import QWidget, QHBoxLayout, QLabel, QPushButton, QLineEdit\n\nfrom AnimationShadowEffect import AnimationShadowEffect  # @UnresolvedImport\n\n\n__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = 'Copyright (c) 2018 Irony'\n__Version__ = 1.0\n\n\nclass Window(QWidget):\n\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n\n        # 绿色边框\n        labelGreen = QLabel(self, pixmap=QPixmap('1.jpg').scaled(100, 100))\n        layout.addWidget(labelGreen)\n        aniGreen = AnimationShadowEffect(Qt.darkGreen, labelGreen)\n        labelGreen.setGraphicsEffect(aniGreen)\n        aniGreen.start()\n\n        # 红色边框,圆形图片\n        labelRed = QLabel(self)\n        labelRed.setMinimumSize(100, 100)\n        labelRed.setMaximumSize(100, 100)\n        labelRed.setStyleSheet('border-image: url(1.jpg);border-radius: 50px;')\n        layout.addWidget(labelRed)\n        aniRed = AnimationShadowEffect(Qt.red, labelGreen)\n        labelRed.setGraphicsEffect(aniRed)\n        aniRed.start()\n\n        # 蓝色边框按钮\n        button = QPushButton('按钮', self)\n        aniButton = AnimationShadowEffect(Qt.blue, button)\n        layout.addWidget(button)\n        button.setGraphicsEffect(aniButton)\n        aniButton.start()\n\n        # 青色边框输入框\n        lineedit = QLineEdit(self)\n        aniEdit = AnimationShadowEffect(Qt.cyan, lineedit)\n        layout.addWidget(lineedit)\n        lineedit.setGraphicsEffect(aniEdit)\n        aniEdit.start()\n\n\nif __name__ == '__main__':\n    import sys\n    from PyQt5.QtWidgets import QApplication\n    app = QApplication(sys.argv)\n    w = Window()\n    w.show()\n    sys.exit(app.exec_())\n```","categories":[{"name":"例子","path":"api/categories/例子.json"}],"tags":[{"name":"PyQt","path":"api/tags/PyQt.json"},{"name":"动画","path":"api/tags/动画.json"},{"name":"阴影","path":"api/tags/阴影.json"}]}