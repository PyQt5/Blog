{"author":"Irony","title":"PyQt5窗口翻转动画","slug":"flipwidgetanimation","date":"2019-05-15 22:48:00","updated":"2019-10-21T15:17:30.301Z","comments":true,"path":"api/articles/flipwidgetanimation.json","url":"https://pyqt5.com/flipwidgetanimation.html","excerpt":"QQ的界面一直是用来模仿练习做界面的好东西，这里就有一个类似QQ登录界面的实现翻转效果，当然这里并没有用两个窗口去做，而是用了QStackedWidget包含两个控件做切换，同时单独使用一个窗口做动画绘制。<br>","covers":["https://github.com/PyQt5/PyQt/raw/master/QPropertyAnimation/ScreenShot/FlipWidgetAnimation.gif"],"content":"<p>QQ的界面一直是用来模仿练习做界面的好东西，这里就有一个类似QQ登录界面的实现翻转效果，当然这里并没有用两个窗口去做，而是用了<code>QStackedWidget</code>包含两个控件做切换，同时单独使用一个窗口做动画绘制。<br><a id=\"more\"></a></p>\n<h2 id=\"原理说明\"><a href=\"#原理说明\" class=\"headerlink\" title=\"原理说明\"></a>原理说明</h2><ol>\n<li>用了两个<code>QLabel</code>来显示模拟的图片界面，并实现鼠标点击模拟真实的窗口对应位置点击</li>\n<li>用了<code>QStackedWidget</code>来存放上面的两个界面<code>QLabel</code></li>\n<li>点击切换时主要是对上面的两个界面进行截图并传递给翻转动画窗口</li>\n<li>通过<code>setWindowOpacity</code>控制主窗口的显示隐藏（保留任务栏），当然也可以用<code>hide</code></li>\n<li>动画窗口<code>FlipWidget.py</code>主要实现两张图片的翻转显示，考虑到0-90和90-180之前的情况，以及图片的缩放动画</li>\n</ol>\n<h2 id=\"核心实现\"><a href=\"#核心实现\" class=\"headerlink\" title=\"核心实现\"></a>核心实现</h2><ol>\n<li>主要是在<code>paintEvent</code>方法中使用<code>QTransform</code>对<code>QPainter</code>进行圆心变换以及<code>rotate</code>设置翻转角度</li>\n<li>同时根据翻转的角度范围对图片进行切换和缩放</li>\n</ol>\n<pre><code class=\"python\">def paintEvent(self, event):\n    super(FlipWidget, self).paintEvent(event)\n\n    if hasattr(self, &#39;image1&#39;) and hasattr(self, &#39;image2&#39;) and self.isVisible():\n\n        painter = QPainter(self)\n        painter.setRenderHint(QPainter.Antialiasing, True)\n        painter.setRenderHint(QPainter.SmoothPixmapTransform, True)\n\n        # 变换\n        transform = QTransform()\n        # 把圆心设置为矩形中心\n        transform.translate(self.width() / 2, self.height() / 2)\n\n        if self._angle &gt;= -90 and self._angle &lt;= 90:\n            # 当翻转角度在90范围内显示第一张图，且从大图缩放到小图的过程\n            painter.save()\n            # 设置翻转角度\n            transform.rotate(self._angle, Qt.YAxis)\n            painter.setTransform(transform)\n            # 缩放图片高度\n            width = self.image1.width() / 2\n            height = int(self.image1.height() *\n                         (1 - abs(self._angle / self.Scale) / 100))\n            image = self.image1.scaled(\n                self.image1.width(), height,\n                Qt.IgnoreAspectRatio, Qt.SmoothTransformation)\n            painter.drawPixmap(\n                QPointF(-width, -height / 2), image)\n            painter.restore()\n        else:\n            # 当翻转角度在90范围内显示第二张图，且从小图缩放到原图的过程\n            painter.save()\n            if self._angle &gt; 0:\n                angle = 180 + self._angle\n            else:\n                angle = self._angle - 180\n            # 设置翻转角度， 注意这里角度有差异\n            transform.rotate(angle, Qt.YAxis)\n            painter.setTransform(transform)\n            # 缩放图片高度\n            width = self.image2.width() / 2\n            height = int(self.image2.height() *\n                         (1 - ((360 - abs(angle)) / self.Scale / 100)))\n            image = self.image2.scaled(\n                self.image2.width(), height,\n                Qt.IgnoreAspectRatio, Qt.SmoothTransformation)\n            painter.drawPixmap(\n                QPointF(-width, -height / 2), image)\n            painter.restore()\n</code></pre>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p><a href=\"https://github.com/PyQt5/PyQt/blob/master/QPropertyAnimation/FlipWidgetAnimation.py\" target=\"_blank\" rel=\"noopener\">https://github.com/PyQt5/PyQt/blob/master/QPropertyAnimation/FlipWidgetAnimation.py</a></p>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"https://github.com/PyQt5/PyQt/raw/master/QPropertyAnimation/ScreenShot/FlipWidgetAnimation.gif\" alt=\"FlipWidgetAnimation\"></p>\n","raw":"---\nauthor: Irony\ntitle: PyQt5窗口翻转动画\ndate: 2019-05-15 22:48:00\ntop: 1\ntags: \n - PyQt\n - 动画\n - 翻转\ncategories: 例子\n---\n\nQQ的界面一直是用来模仿练习做界面的好东西，这里就有一个类似QQ登录界面的实现翻转效果，当然这里并没有用两个窗口去做，而是用了`QStackedWidget`包含两个控件做切换，同时单独使用一个窗口做动画绘制。\n<!-- more -->\n\n## 原理说明\n\n1. 用了两个`QLabel`来显示模拟的图片界面，并实现鼠标点击模拟真实的窗口对应位置点击\n2. 用了`QStackedWidget`来存放上面的两个界面`QLabel`\n3. 点击切换时主要是对上面的两个界面进行截图并传递给翻转动画窗口\n4. 通过`setWindowOpacity`控制主窗口的显示隐藏（保留任务栏），当然也可以用`hide`\n5. 动画窗口`FlipWidget.py`主要实现两张图片的翻转显示，考虑到0-90和90-180之前的情况，以及图片的缩放动画\n\n## 核心实现\n\n1. 主要是在`paintEvent`方法中使用`QTransform`对`QPainter`进行圆心变换以及`rotate`设置翻转角度\n2. 同时根据翻转的角度范围对图片进行切换和缩放\n\n```python\ndef paintEvent(self, event):\n    super(FlipWidget, self).paintEvent(event)\n\n    if hasattr(self, 'image1') and hasattr(self, 'image2') and self.isVisible():\n\n        painter = QPainter(self)\n        painter.setRenderHint(QPainter.Antialiasing, True)\n        painter.setRenderHint(QPainter.SmoothPixmapTransform, True)\n\n        # 变换\n        transform = QTransform()\n        # 把圆心设置为矩形中心\n        transform.translate(self.width() / 2, self.height() / 2)\n\n        if self._angle >= -90 and self._angle <= 90:\n            # 当翻转角度在90范围内显示第一张图，且从大图缩放到小图的过程\n            painter.save()\n            # 设置翻转角度\n            transform.rotate(self._angle, Qt.YAxis)\n            painter.setTransform(transform)\n            # 缩放图片高度\n            width = self.image1.width() / 2\n            height = int(self.image1.height() *\n                         (1 - abs(self._angle / self.Scale) / 100))\n            image = self.image1.scaled(\n                self.image1.width(), height,\n                Qt.IgnoreAspectRatio, Qt.SmoothTransformation)\n            painter.drawPixmap(\n                QPointF(-width, -height / 2), image)\n            painter.restore()\n        else:\n            # 当翻转角度在90范围内显示第二张图，且从小图缩放到原图的过程\n            painter.save()\n            if self._angle > 0:\n                angle = 180 + self._angle\n            else:\n                angle = self._angle - 180\n            # 设置翻转角度， 注意这里角度有差异\n            transform.rotate(angle, Qt.YAxis)\n            painter.setTransform(transform)\n            # 缩放图片高度\n            width = self.image2.width() / 2\n            height = int(self.image2.height() *\n                         (1 - ((360 - abs(angle)) / self.Scale / 100)))\n            image = self.image2.scaled(\n                self.image2.width(), height,\n                Qt.IgnoreAspectRatio, Qt.SmoothTransformation)\n            painter.drawPixmap(\n                QPointF(-width, -height / 2), image)\n            painter.restore()\n```\n\n## 代码\n\nhttps://github.com/PyQt5/PyQt/blob/master/QPropertyAnimation/FlipWidgetAnimation.py\n\n\n## 效果图\n\n![FlipWidgetAnimation](https://github.com/PyQt5/PyQt/raw/master/QPropertyAnimation/ScreenShot/FlipWidgetAnimation.gif)","categories":[{"name":"例子","path":"api/categories/例子.json"}],"tags":[{"name":"PyQt","path":"api/tags/PyQt.json"},{"name":"动画","path":"api/tags/动画.json"},{"name":"翻转","path":"api/tags/翻转.json"}]}