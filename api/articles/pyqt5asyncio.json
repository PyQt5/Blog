{"author":"Irony","title":"PyQt5结合Asyncio异步","slug":"pyqt5asyncio","date":"2018-10-24 14:32:26","updated":"2020-02-21T15:27:43.040Z","comments":true,"path":"api/articles/pyqt5asyncio.json","url":"https://pyqt5.com/pyqt5asyncio.html","excerpt":"今天尝试了下quamash框架，该框架是一个PyQt的异步事件循环封装库，使用Python3+ 的asyncio这个异步库。在看了该项目的内容后发现只有一个简单的进度条例子，故尝试用其来下载网络图片并显示。<br>","covers":["/images/pyqt5asyncio.gif"],"content":"<p>今天尝试了下<a href=\"https://github.com/harvimt/quamash\" target=\"_blank\" rel=\"noopener\">quamash</a>框架，该框架是一个<code>PyQt</code>的异步事件循环封装库，使用Python3+ 的<code>asyncio</code>这个异步库。在看了该项目的内容后发现只有一个简单的进度条例子，故尝试用其来下载网络图片并显示。<br><a id=\"more\"></a></p>\n<h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><ol>\n<li>pip install quamash</li>\n<li>pip install aiohttp</li>\n<li>Python3.5+ 和 PyQt5</li>\n</ol>\n<p>这里使用<code>aiohttp</code>是因为它基于<code>asyncio</code>封装的网络操作库，常见的<code>get</code>、<code>post</code>等方法，不过它只支持Python3.5及以上的版本，主要是它使用了async def 这样的语法。</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><ol>\n<li>在创建<code>QApplication</code>后随即设置替换事件循环<code>loop</code><pre><code class=\"python\">app = QApplication(sys.argv)\nloop = QEventLoop(app)\nasyncio.set_event_loop(loop)\nw = Window()\n</code></pre>\n</li>\n<li>通过<code>asyncio.ensure_future(func(), loop=loop)</code>来执行某个异步函数</li>\n</ol>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:right\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Window</td>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:right\">initSession（初始化session）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">↓</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">下载按钮</td>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:right\">doDownload（执行_doDownload方法）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">↓</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">session.get（下载json数据进行解析）</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">↓</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">添加到界面</td>\n<td style=\"text-align:center\">←</td>\n<td style=\"text-align:right\">_doDownloadImage（对单张图片进行下载）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><pre><code class=\"python\">#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n&quot;&quot;&quot;\nCreated on 2018年10月24日\n@author: Irony\n@site: https://github.com/892768447\n@email: 892768447@qq.com\n@file: AsyncioUiClient\n@description: \n&quot;&quot;&quot;\nimport asyncio\n\nfrom PyQt5.QtCore import Qt\nfrom PyQt5.QtGui import QPixmap, QMovie\nfrom PyQt5.QtWidgets import QWidget, QVBoxLayout, QPushButton,\\\n    QApplication, QListWidget, QListWidgetItem, QLabel, QMessageBox\nimport aiohttp\nfrom quamash import QEventLoop\n\n\n__Author__ = &quot;&quot;&quot;By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com&quot;&quot;&quot;\n__Copyright__ = &quot;Copyright (c) 2018 Irony&quot;\n__Version__ = &quot;Version 1.0&quot;\n\nUrl = &#39;https://www.doutula.com/api/search?keyword=%E6%9C%80%E6%96%B0%E8%A1%A8%E6%83%85&amp;mime=0&amp;page={}&#39;\nHeaders = {\n    &#39;:authority&#39;: &#39;www.doutula.com&#39;,\n    &#39;:method&#39;: &#39;GET&#39;,\n    &#39;:scheme&#39;: &#39;https&#39;,\n    &#39;accept&#39;: &#39;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&#39;,\n    &#39;accept-language&#39;: &#39;zh-CN,zh;q=0.9&#39;,\n    &#39;cache-control&#39;: &#39;max-age=0&#39;,\n    &#39;dnt&#39;: &#39;1&#39;,\n    &#39;upgrade-insecure-requests&#39;: &#39;1&#39;,\n    &#39;user-agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.26 Safari/537.36 Core/1.63.6756.400 QQBrowser/10.2.2498.400&#39;\n}\n\n\nclass Window(QWidget):\n\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.listWidget = QListWidget(self)\n        self.listWidget.setSpacing(2)  # item直接的间隔\n        # 隐藏横向滚动条\n        self.listWidget.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)\n        # 让list 从左到右排列\n        self.listWidget.setFlow(self.listWidget.LeftToRight)\n        # 自动换行\n        self.listWidget.setWrapping(True)\n        self.listWidget.setResizeMode(self.listWidget.Adjust)\n\n        self.buttonMsg = QPushButton(&#39;弹出提示框&#39;, self, clicked=self.showMessage)\n        self.buttonDown = QPushButton(&#39;下载图片&#39;, self, clicked=self.doDownload)\n        layout.addWidget(self.listWidget)\n        layout.addWidget(self.buttonMsg)\n        layout.addWidget(self.buttonDown)\n        self.currentPage = 0\n        self.initSession()  # 其实没必要，session主要用在需要登录的网站。缓存cookie用\n\n    def initSession(self):\n        async def _initSession():\n            # 初始化session\n            self.session = aiohttp.ClientSession(loop=loop)\n            print(self.session)\n        asyncio.ensure_future(_initSession(), loop=loop)\n\n    async def _doDownloadImage(self, url):\n        # 下载图片并添加到界面\n        async with self.session.get(url) as resp:\n            data = await resp.read()\n            if not data:\n                print(&#39;下载失败: &#39;, url)\n                return\n            path = os.path.join(&#39;tmp&#39;, os.path.basename(url))\n            with open(path, &#39;wb&#39;) as fp:\n                fp.write(data)\n            item = QListWidgetItem(url, self.listWidget)\n            image = QPixmap(path)\n            item.setSizeHint(image.size())\n            label = QLabel(self.listWidget)\n            label.setPixmap(image)\n            if path.endswith(&#39;.gif&#39;):  # 可能是动态图\n                label.setMovie(QMovie(path))\n            self.listWidget.setItemWidget(item, label)\n            self.listWidget.scrollToBottom()\n\n    async def _doDownload(self):\n        # 下载工作\n        if self.currentPage == -1:\n            QMessageBox.information(self, &#39;提示&#39;, &#39;已经没有更多了&#39;)\n            return\n        self.currentPage += 1\n        url = Url.format(self.currentPage)\n        print(&#39;get url: &#39;, url)\n        async with self.session.get(url, headers=Headers) as resp:\n            data = await resp.json()\n            if not data:\n                return\n            data = data.get(&#39;data&#39;, None)\n            if not data:\n                self.currentPage = -1\n                print(&#39;已经是最后一页了&#39;)\n                return\n            # 解析json并生成item添加到界面中\n            for entity in data.get(&#39;list&#39;, []):\n                url = entity.get(&#39;image_url&#39;, None)\n                if not url:\n                    continue\n                await self._doDownloadImage(url)  # 下载图片\n\n    def doDownload(self):\n        # 响应按钮点击调用\n        asyncio.ensure_future(self._doDownload(), loop=loop)\n\n    def showMessage(self):\n        # 显示对话框\n        app.aboutQt()\n\n    def closeEvent(self, event):\n        if not self.session.closed:\n            asyncio.ensure_future(self.session.close(), loop=loop)\n        super(Window, self).closeEvent(event)\n\n\nif __name__ == &#39;__main__&#39;:\n    import sys\n    import cgitb\n    import os\n    os.makedirs(&#39;tmp&#39;, exist_ok=True)\n    sys.excepthook = cgitb.enable(1, None, 5, &#39;text&#39;)\n    app = QApplication(sys.argv)\n    loop = QEventLoop(app)\n    asyncio.set_event_loop(loop)\n    w = Window()\n    w.show()\n    with loop:\n        loop.run_forever()\n</code></pre>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"/images/pyqt5asyncio.gif\" alt=\"pyqt5asyncio\"></p>\n","raw":"---\nauthor: Irony\ntitle: PyQt5结合Asyncio异步\ndate: 2018-10-24 14:32:26\ntop: 1\ntags: \n - PyQt\n - Asyncio\n - 异步\ncategories: 例子\n---\n\n今天尝试了下[quamash](https://github.com/harvimt/quamash)框架，该框架是一个`PyQt`的异步事件循环封装库，使用Python3+ 的`asyncio`这个异步库。在看了该项目的内容后发现只有一个简单的进度条例子，故尝试用其来下载网络图片并显示。\n<!-- more -->\n\n## 安装依赖\n\n1. pip install quamash\n2. pip install aiohttp\n3. Python3.5+ 和 PyQt5\n\n这里使用`aiohttp`是因为它基于`asyncio`封装的网络操作库，常见的`get`、`post`等方法，不过它只支持Python3.5及以上的版本，主要是它使用了async def 这样的语法。\n\n## 说明\n\n1. 在创建`QApplication`后随即设置替换事件循环`loop`\n```python\napp = QApplication(sys.argv)\nloop = QEventLoop(app)\nasyncio.set_event_loop(loop)\nw = Window()\n```\n2. 通过`asyncio.ensure_future(func(), loop=loop)`来执行某个异步函数\n\n## 流程\n\n|           |    |                             |\n|:----------|:--:|----------------------------:|\n| Window    |  → | initSession（初始化session） |\n| ↓         |    |                             |\n| 下载按钮   |  → | doDownload（执行_doDownload方法） |\n| ↓         |    |                             |\n| session.get（下载json数据进行解析） |   |      |\n| ↓         |    |                             |\n| 添加到界面 |  ← | _doDownloadImage（对单张图片进行下载） |\n\n## 源码\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nCreated on 2018年10月24日\n@author: Irony\n@site: https://github.com/892768447\n@email: 892768447@qq.com\n@file: AsyncioUiClient\n@description: \n\"\"\"\nimport asyncio\n\nfrom PyQt5.QtCore import Qt\nfrom PyQt5.QtGui import QPixmap, QMovie\nfrom PyQt5.QtWidgets import QWidget, QVBoxLayout, QPushButton,\\\n    QApplication, QListWidget, QListWidgetItem, QLabel, QMessageBox\nimport aiohttp\nfrom quamash import QEventLoop\n\n\n__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\n\nUrl = 'https://www.doutula.com/api/search?keyword=%E6%9C%80%E6%96%B0%E8%A1%A8%E6%83%85&mime=0&page={}'\nHeaders = {\n    ':authority': 'www.doutula.com',\n    ':method': 'GET',\n    ':scheme': 'https',\n    'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\n    'accept-language': 'zh-CN,zh;q=0.9',\n    'cache-control': 'max-age=0',\n    'dnt': '1',\n    'upgrade-insecure-requests': '1',\n    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.26 Safari/537.36 Core/1.63.6756.400 QQBrowser/10.2.2498.400'\n}\n\n\nclass Window(QWidget):\n\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        self.listWidget = QListWidget(self)\n        self.listWidget.setSpacing(2)  # item直接的间隔\n        # 隐藏横向滚动条\n        self.listWidget.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)\n        # 让list 从左到右排列\n        self.listWidget.setFlow(self.listWidget.LeftToRight)\n        # 自动换行\n        self.listWidget.setWrapping(True)\n        self.listWidget.setResizeMode(self.listWidget.Adjust)\n\n        self.buttonMsg = QPushButton('弹出提示框', self, clicked=self.showMessage)\n        self.buttonDown = QPushButton('下载图片', self, clicked=self.doDownload)\n        layout.addWidget(self.listWidget)\n        layout.addWidget(self.buttonMsg)\n        layout.addWidget(self.buttonDown)\n        self.currentPage = 0\n        self.initSession()  # 其实没必要，session主要用在需要登录的网站。缓存cookie用\n\n    def initSession(self):\n        async def _initSession():\n            # 初始化session\n            self.session = aiohttp.ClientSession(loop=loop)\n            print(self.session)\n        asyncio.ensure_future(_initSession(), loop=loop)\n\n    async def _doDownloadImage(self, url):\n        # 下载图片并添加到界面\n        async with self.session.get(url) as resp:\n            data = await resp.read()\n            if not data:\n                print('下载失败: ', url)\n                return\n            path = os.path.join('tmp', os.path.basename(url))\n            with open(path, 'wb') as fp:\n                fp.write(data)\n            item = QListWidgetItem(url, self.listWidget)\n            image = QPixmap(path)\n            item.setSizeHint(image.size())\n            label = QLabel(self.listWidget)\n            label.setPixmap(image)\n            if path.endswith('.gif'):  # 可能是动态图\n                label.setMovie(QMovie(path))\n            self.listWidget.setItemWidget(item, label)\n            self.listWidget.scrollToBottom()\n\n    async def _doDownload(self):\n        # 下载工作\n        if self.currentPage == -1:\n            QMessageBox.information(self, '提示', '已经没有更多了')\n            return\n        self.currentPage += 1\n        url = Url.format(self.currentPage)\n        print('get url: ', url)\n        async with self.session.get(url, headers=Headers) as resp:\n            data = await resp.json()\n            if not data:\n                return\n            data = data.get('data', None)\n            if not data:\n                self.currentPage = -1\n                print('已经是最后一页了')\n                return\n            # 解析json并生成item添加到界面中\n            for entity in data.get('list', []):\n                url = entity.get('image_url', None)\n                if not url:\n                    continue\n                await self._doDownloadImage(url)  # 下载图片\n\n    def doDownload(self):\n        # 响应按钮点击调用\n        asyncio.ensure_future(self._doDownload(), loop=loop)\n\n    def showMessage(self):\n        # 显示对话框\n        app.aboutQt()\n\n    def closeEvent(self, event):\n        if not self.session.closed:\n            asyncio.ensure_future(self.session.close(), loop=loop)\n        super(Window, self).closeEvent(event)\n\n\nif __name__ == '__main__':\n    import sys\n    import cgitb\n    import os\n    os.makedirs('tmp', exist_ok=True)\n    sys.excepthook = cgitb.enable(1, None, 5, 'text')\n    app = QApplication(sys.argv)\n    loop = QEventLoop(app)\n    asyncio.set_event_loop(loop)\n    w = Window()\n    w.show()\n    with loop:\n        loop.run_forever()\n```\n\n## 效果图\n\n![pyqt5asyncio](/images/pyqt5asyncio.gif)","categories":[{"name":"例子","path":"api/categories/例子.json"}],"tags":[{"name":"PyQt","path":"api/tags/PyQt.json"},{"name":"Asyncio","path":"api/tags/Asyncio.json"},{"name":"异步","path":"api/tags/异步.json"}]}