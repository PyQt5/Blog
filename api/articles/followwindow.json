{"author":"Irony","title":"PyQt5窗口跟随其它窗口","slug":"followwindow","date":"2018-10-23 15:08:56","updated":"2019-11-22T10:12:08.353Z","comments":true,"path":"api/articles/followwindow.json","url":"https://pyqt5.com/followwindow.html","excerpt":"要实现PyQt窗口跟随其它外部的窗口，能想到两点办法，一个是hook系统事件得到目标窗口的位置和大小以及是否关闭等，二是通过循环检测窗口的位置来实现。<br>","covers":["https://github.com/PyQt5/PyQt/raw/master/Demo/ScreenShot/FollowWindow.gif"],"content":"<p>要实现<code>PyQt</code>窗口跟随其它外部的窗口，能想到两点办法，一个是hook系统事件得到目标窗口的位置和大小以及是否关闭等，二是通过循环检测窗口的位置来实现。<br><a id=\"more\"></a></p>\n<h2 id=\"基于Windows定时检测目标窗口\"><a href=\"#基于Windows定时检测目标窗口\" class=\"headerlink\" title=\"基于Windows定时检测目标窗口\"></a>基于Windows定时检测目标窗口</h2><ol>\n<li>利用<code>win32gui</code>模块获取目标窗口的句柄</li>\n<li>通过句柄获取目标窗口的大小位置，并设置自己的位置</li>\n<li>主要是检测时间，在10毫秒以下很流畅</li>\n<li>窗口关闭是根据目标句柄无效来判断</li>\n</ol>\n<p><a href=\"https://github.com/PyQt5/PyQt/blob/master/Demo/FollowWindow.py\" target=\"_blank\" rel=\"noopener\">https://github.com/PyQt5/PyQt/blob/master/Demo/FollowWindow.py</a></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"python\">#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n&quot;&quot;&quot;\nCreated on 2018年10月22日\n@author: Irony\n@site: https://github.com/892768447\n@email: 892768447@qq.com\n@file: FollowWindow\n@description: \n&quot;&quot;&quot;\nimport os\n\nfrom PyQt5.QtCore import QTimer\nfrom PyQt5.QtWidgets import QWidget, QVBoxLayout, QPushButton\nimport win32gui\n\n\n__Author__ = &quot;&quot;&quot;By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com&quot;&quot;&quot;\n__Copyright__ = &quot;Copyright (c) 2018 Irony&quot;\n__Version__ = &quot;Version 1.0&quot;\n\n\nclass Window(QWidget):\n\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QPushButton(&#39;test&#39;, self))\n        self.tmpHwnd = None\n        # 启动定时器检测记事本的位置大小和是否关闭\n        self.checkTimer = QTimer(self, timeout=self.checkWindow)\n        self.checkTimer.start(10)  # 10毫秒比较流畅\n\n    def checkWindow(self):\n        # 查找\n        hwnd = win32gui.FindWindow(&#39;Notepad&#39;, None)\n        if self.tmpHwnd and not hwnd:\n            # 表示记事本关闭了\n            self.checkTimer.stop()\n            self.close()  # 关闭自己\n            return\n        if not hwnd:\n            return\n        self.tmpHwnd = hwnd\n        # 获取位置\n        rect = win32gui.GetWindowRect(hwnd)\n        print(rect)\n        self.move(rect[2], rect[1])\n\n\nif __name__ == &#39;__main__&#39;:\n    import sys\n    from PyQt5.QtWidgets import QApplication\n    # 先检测是否已有记事本打开\n    hwnd = win32gui.FindWindow(&#39;Notepad&#39;, None)\n    print(&#39;hwnd&#39;, hwnd)\n    if not hwnd:\n        # 启动记事本\n        os.startfile(&#39;notepad&#39;)\n    app = QApplication(sys.argv)\n    w = Window()\n    w.show()\n    sys.exit(app.exec_())\n</code></pre>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"https://github.com/PyQt5/PyQt/raw/master/Demo/ScreenShot/FollowWindow.gif\" alt=\"FollowWindow\"></p>\n","raw":"---\nauthor: Irony\ntitle: PyQt5窗口跟随其它窗口\ndate: 2018-10-23 15:08:56\ntop: 1\ntags: \n - PyQt\n - 窗口\ncategories: 例子\n---\n\n要实现`PyQt`窗口跟随其它外部的窗口，能想到两点办法，一个是hook系统事件得到目标窗口的位置和大小以及是否关闭等，二是通过循环检测窗口的位置来实现。\n<!-- more -->\n\n## 基于Windows定时检测目标窗口\n\n1. 利用`win32gui`模块获取目标窗口的句柄\n2. 通过句柄获取目标窗口的大小位置，并设置自己的位置\n3. 主要是检测时间，在10毫秒以下很流畅\n4. 窗口关闭是根据目标句柄无效来判断\n\nhttps://github.com/PyQt5/PyQt/blob/master/Demo/FollowWindow.py\n\n## 代码\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nCreated on 2018年10月22日\n@author: Irony\n@site: https://github.com/892768447\n@email: 892768447@qq.com\n@file: FollowWindow\n@description: \n\"\"\"\nimport os\n\nfrom PyQt5.QtCore import QTimer\nfrom PyQt5.QtWidgets import QWidget, QVBoxLayout, QPushButton\nimport win32gui\n\n\n__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\n\n\nclass Window(QWidget):\n\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QPushButton('test', self))\n        self.tmpHwnd = None\n        # 启动定时器检测记事本的位置大小和是否关闭\n        self.checkTimer = QTimer(self, timeout=self.checkWindow)\n        self.checkTimer.start(10)  # 10毫秒比较流畅\n\n    def checkWindow(self):\n        # 查找\n        hwnd = win32gui.FindWindow('Notepad', None)\n        if self.tmpHwnd and not hwnd:\n            # 表示记事本关闭了\n            self.checkTimer.stop()\n            self.close()  # 关闭自己\n            return\n        if not hwnd:\n            return\n        self.tmpHwnd = hwnd\n        # 获取位置\n        rect = win32gui.GetWindowRect(hwnd)\n        print(rect)\n        self.move(rect[2], rect[1])\n\n\nif __name__ == '__main__':\n    import sys\n    from PyQt5.QtWidgets import QApplication\n    # 先检测是否已有记事本打开\n    hwnd = win32gui.FindWindow('Notepad', None)\n    print('hwnd', hwnd)\n    if not hwnd:\n        # 启动记事本\n        os.startfile('notepad')\n    app = QApplication(sys.argv)\n    w = Window()\n    w.show()\n    sys.exit(app.exec_())\n```\n\n## 效果图\n\n![FollowWindow](https://github.com/PyQt5/PyQt/raw/master/Demo/ScreenShot/FollowWindow.gif)","categories":[{"name":"例子","path":"api/categories/例子.json"}],"tags":[{"name":"PyQt","path":"api/tags/PyQt.json"},{"name":"窗口","path":"api/tags/窗口.json"}]}