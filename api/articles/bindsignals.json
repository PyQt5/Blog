{"author":"Irony","title":"三种方式绑定信号槽","slug":"bindsignals","date":"2019-05-04 16:07:06","updated":"2019-10-21T14:49:04.002Z","comments":true,"path":"api/articles/bindsignals.json","url":"https://pyqt5.com/bindsignals.html","excerpt":"网上关于PyQt5的信号绑定使用的教程比较上，很多还是以前的绑定方式，导致在PyQt5中无法使用，这里归纳总结下已有的几种绑定信号槽的方式，<br>这几种方式各有各的优点和缺点。<br>","covers":null,"content":"<p>网上关于PyQt5的信号绑定使用的教程比较上，很多还是以前的绑定方式，导致在PyQt5中无法使用，这里归纳总结下已有的几种绑定信号槽的方式，<br>这几种方式各有各的优点和缺点。<br><a id=\"more\"></a></p>\n<h2 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h2><p>这个方式是最开始接触设计师的时候知道的，主要是通过控件的<code>objectName</code>和<code>QtCore.QMetaObject.connectSlotsByName(Form)</code>提供的连接函数来自动完成注册，<br>比如带有按钮的界面ui文件转成py文件后会发现如下代码：</p>\n<pre><code class=\"python\">self.pushButton = QtWidgets.QPushButton(Form)\nself.pushButton.setGeometry(QtCore.QRect(60, 40, 93, 28))\nself.pushButton.setObjectName(&quot;pushButton&quot;)\n\n# 通过这里自动完成连接信号槽\nQtCore.QMetaObject.connectSlotsByName(Form)\n</code></pre>\n<p>此时只需要继承该UI文件类然后增加如下方法：</p>\n<pre><code class=\"python\">\n@pyqtSlot()\ndef on_pushButton_clicked(self):\n    print(&#39;button clicked&#39;)\n</code></pre>\n<p>这里解释一下，<code>@pyqtSlot()</code>装饰器把函数<code>on_pushButton_clicked</code>包装为一个槽函数，<br>而<code>QtCore.QMetaObject.connectSlotsByName(Form)</code>这句代码的意思就是自动去寻找满足的槽函数</p>\n<p><font color=\"red\">注意：这里有个规范（on_xxxx_clicked）</font>，这里必须要满足<code>on_控件的objectName_控件的信号</code>这样下划线连接起来的函数名才能被识别，<br>比如按钮的点击：<code>on_pushButton_clicked</code>、勾选框的选中：<code>on_checkbox_toggled(self, checked)</code></p>\n<h2 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h2><p>这种方式则直接通过代码里调用控件的信号的<code>connect</code>方法来进行绑定，比如：</p>\n<pre><code class=\"python\"># 按钮点击函数\ndef doClicked(self):\n    print(self.sender(), &#39;clicked&#39;)\n\n# 绑定点击信号\nself.pushButton.clicked.connect(self.doClicked)\n</code></pre>\n<p><font color=\"red\">注意：<code>connect</code>的是函数名字</font>，<code>self.sender()</code>这句代码是获取信号发送者（比如这里就是得到这个按钮对象），<br>用处在于有时候要循环创建一堆按钮</p>\n<h2 id=\"方式三\"><a href=\"#方式三\" class=\"headerlink\" title=\"方式三\"></a>方式三</h2><p>通过参数这种方式其实比较特殊，在PyQt中大部分存在，但是在PySide中则很少，原因是两者的封装方式不同。</p>\n<p>同时该方式用于在纯代码中比较常见，而且需要对该控件有那些信号可以用要很熟习，比如：</p>\n<pre><code class=\"python\">\n# 按钮点击函数\ndef doClicked(self):\n    print(self.sender(), &#39;clicked&#39;)\n\npushButton = QPushButton(&#39;按钮&#39;, self, clicked=self.doClicked, minimumHeight=40)\n</code></pre>\n<p>这里可以通过参数（信号名字） = 函数来绑定信号</p>\n<p>同时也可以设置其它参数，比如<br><code>button.setMinimumHeight(40)</code>也可以像参数里那样设置<code>minimumHeight=40</code></p>\n","raw":"---\nauthor: Irony\ntitle: 三种方式绑定信号槽\ndate: 2019-05-04 16:07:06\ntop: 1\ntags: \n - PyQt\n - 信号\ncategories: 教程\n---\n网上关于PyQt5的信号绑定使用的教程比较上，很多还是以前的绑定方式，导致在PyQt5中无法使用，这里归纳总结下已有的几种绑定信号槽的方式，\n这几种方式各有各的优点和缺点。\n<!-- more -->\n\n## 方式一\n\n这个方式是最开始接触设计师的时候知道的，主要是通过控件的`objectName`和`QtCore.QMetaObject.connectSlotsByName(Form)`提供的连接函数来自动完成注册，\n比如带有按钮的界面ui文件转成py文件后会发现如下代码：\n```python\nself.pushButton = QtWidgets.QPushButton(Form)\nself.pushButton.setGeometry(QtCore.QRect(60, 40, 93, 28))\nself.pushButton.setObjectName(\"pushButton\")\n\n# 通过这里自动完成连接信号槽\nQtCore.QMetaObject.connectSlotsByName(Form)\n```\n\n此时只需要继承该UI文件类然后增加如下方法：\n```python\n\n@pyqtSlot()\ndef on_pushButton_clicked(self):\n    print('button clicked')\n```\n\n这里解释一下，`@pyqtSlot()`装饰器把函数`on_pushButton_clicked`包装为一个槽函数，\n而`QtCore.QMetaObject.connectSlotsByName(Form)`这句代码的意思就是自动去寻找满足的槽函数\n\n<font color=red>注意：这里有个规范（on_xxxx_clicked）</font>，这里必须要满足`on_控件的objectName_控件的信号`这样下划线连接起来的函数名才能被识别，\n比如按钮的点击：`on_pushButton_clicked`、勾选框的选中：`on_checkbox_toggled(self, checked)`\n\n## 方式二\n\n这种方式则直接通过代码里调用控件的信号的`connect`方法来进行绑定，比如：\n```python\n# 按钮点击函数\ndef doClicked(self):\n    print(self.sender(), 'clicked')\n\n# 绑定点击信号\nself.pushButton.clicked.connect(self.doClicked)\n```\n\n<font color=red>注意：`connect`的是函数名字</font>，`self.sender()`这句代码是获取信号发送者（比如这里就是得到这个按钮对象），\n用处在于有时候要循环创建一堆按钮\n\n## 方式三\n\n通过参数这种方式其实比较特殊，在PyQt中大部分存在，但是在PySide中则很少，原因是两者的封装方式不同。\n\n同时该方式用于在纯代码中比较常见，而且需要对该控件有那些信号可以用要很熟习，比如：\n```python\n\n# 按钮点击函数\ndef doClicked(self):\n    print(self.sender(), 'clicked')\n\npushButton = QPushButton('按钮', self, clicked=self.doClicked, minimumHeight=40)\n```\n\n这里可以通过参数（信号名字） = 函数来绑定信号\n\n同时也可以设置其它参数，比如\n`button.setMinimumHeight(40)`也可以像参数里那样设置`minimumHeight=40`\n","categories":[{"name":"教程","path":"api/categories/教程.json"}],"tags":[{"name":"PyQt","path":"api/tags/PyQt.json"},{"name":"信号","path":"api/tags/信号.json"}]}