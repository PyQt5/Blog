{"author":"Irony","title":"PyQt5圆形图片","slug":"circleimage","date":"2018-09-25 22:13:26","updated":"2019-10-21T14:49:45.387Z","comments":true,"path":"api/articles/circleimage.json","url":"https://pyqt5.com/circleimage.html","excerpt":"实现圆形图片的方法有很多，比如用遮罩（mask）,裁切等等。这里比较几种实现方式，选出个人认为最优的方案。<br>","covers":["/images/circleimage1.png","/images/circleimage2.png"],"content":"<p>实现圆形图片的方法有很多，比如用遮罩（mask）,裁切等等。这里比较几种实现方式，选出个人认为最优的方案。<br><a id=\"more\"></a></p>\n<p><a href=\"https://github.com/PyQt5/PyQt/blob/master/QLabel/CircleImage.py\" target=\"_blank\" rel=\"noopener\">https://github.com/PyQt5/PyQt/blob/master/QLabel/CircleImage.py</a></p>\n<h2 id=\"采用mask方式\"><a href=\"#采用mask方式\" class=\"headerlink\" title=\"采用mask方式\"></a>采用mask方式</h2><p>具体参考 <a href=\"https://www.cnblogs.com/zhehan54/p/9515124.html\" target=\"_blank\" rel=\"noopener\">【Qt】QLabel实现的圆形图像 - 米罗西 - 博客园</a></p>\n<h2 id=\"画圆形遮盖（适合纯色背景）\"><a href=\"#画圆形遮盖（适合纯色背景）\" class=\"headerlink\" title=\"画圆形遮盖（适合纯色背景）\"></a>画圆形遮盖（适合纯色背景）</h2><p>原理是在原图片上画一个4角有颜色，中间圆形镂空的图片。</p>\n<p><img src=\"/images/circleimage1.png\" alt=\"circleimage1\"></p>\n<pre><code class=\"python\">#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n&#39;&#39;&#39;\nCreated on 2017年8月25日\n@author: Irony.&quot;[讽刺]\n@site: https://pyqt5.com, https://github.com/892768447\n@email: 892768447@qq.com\n@description: \n&#39;&#39;&#39;\nfrom PyQt5.QtCore import Qt\nfrom PyQt5.QtGui import QPixmap, QPainter, QPainterPath\nfrom PyQt5.QtWidgets import QLabel, QWidget, QHBoxLayout\n\n\n__Author__ = &quot;By: Irony.\\&quot;[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com&quot;\n__Copyright__ = &quot;Copyright (c) 2017 Irony.\\&quot;[讽刺]&quot;\n__Version__ = &quot;Version 1.0&quot;\n\n\nclass Label(QLabel):\n\n    def __init__(self, *args, antialiasing=True, **kwargs):\n        super(Label, self).__init__(*args, **kwargs)\n        self.Antialiasing = antialiasing\n        self.setMaximumSize(200, 200)\n        self.setMinimumSize(200, 200)\n        self.radius = 100\n\n        #加载图片并缩放\n        self.image = QPixmap(&quot;head.jpg&quot;).scaled(\n            200, 200, Qt.KeepAspectRatioByExpanding, Qt.SmoothTransformation)\n\n        painter = QPainter(self.image)\n        if self.Antialiasing:\n            painter.setRenderHint(QPainter.Antialiasing, True)\n            painter.setRenderHint(QPainter.HighQualityAntialiasing, True)\n            painter.setRenderHint(QPainter.SmoothPixmapTransform, True)\n\n        path = QPainterPath()\n        path.addRoundedRect(\n            0, 0, self.width(), self.height(), self.radius, self.radius)\n        path.addRect(0,0,self.width(),self.height())\n        painter.setPen(Qt.NoPen)\n        painter.setBrush(Qt.green)\n        painter.drawPath(path)\n        self.setPixmap(self.image)\n\n\nclass Window(QWidget):\n\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        layout.addWidget(Label(self))\n        layout.addWidget(Label(self, antialiasing=False))\n        self.setStyleSheet(&quot;background: black;&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    import sys\n    from PyQt5.QtWidgets import QApplication\n    app = QApplication(sys.argv)\n    w = Window()\n    w.show()\n    sys.exit(app.exec_())\n</code></pre>\n<h2 id=\"使用QPainter的setCompositionMode\"><a href=\"#使用QPainter的setCompositionMode\" class=\"headerlink\" title=\"使用QPainter的setCompositionMode\"></a>使用QPainter的setCompositionMode</h2><p>具体参考 <a href=\"https://qtdream.com/topic/911/qt-%E5%9C%86%E5%BD%A2%E5%A4%B4%E5%83%8F%E5%88%B6%E4%BD%9C%E5%B7%A5%E5%85%B7-%E6%8A%97%E9%94%AF%E9%BD%BF-%E5%8F%AF%E7%BC%A9%E6%94%BE%E7%BC%96%E8%BE%91\" target=\"_blank\" rel=\"noopener\">Qt 圆形头像制作工具 抗锯齿 可缩放编辑</a></p>\n<pre><code class=\"c++\">//result_avatar_size 是我们最后生成的图片的长宽，可以是QSize(200, 200)的正圆\ndestination_image = QImage(result_avatar_size, QImage::Format_ARGB32_Premultiplied);\n//在黑色的正方形中间画一个透明的圆，作为头像遮罩\nQPainter painter(&amp;destination_image);\npainter.setRenderHint(QPainter::Antialiasing);\n//全涂黑\npainter.fillRect(destination_image.rect(), QBrush(Qt::black, Qt::SolidPattern));\npainter.setCompositionMode(QPainter::CompositionMode_SourceOut);\npainter.setPen(Qt::NoPen);\npainter.setBrush(QBrush(Qt::transparent, Qt::SolidPattern));\n//画透明区域\npainter.drawEllipse(destination_image.rect());\n</code></pre>\n<h2 id=\"使用QPainter的切割方法（推荐）\"><a href=\"#使用QPainter的切割方法（推荐）\" class=\"headerlink\" title=\"使用QPainter的切割方法（推荐）\"></a>使用QPainter的切割方法（推荐）</h2><p>利用<code>QPainter.setClipPath</code>方法切割一个圆形的<code>QPainterPath</code></p>\n<p><img src=\"/images/circleimage2.png\" alt=\"circleimage2\"></p>\n<pre><code class=\"python\">#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n&#39;&#39;&#39;\nCreated on 2017年8月25日\n@author: Irony.&quot;[讽刺]\n@site: https://pyqt5.com, https://github.com/892768447\n@email: 892768447@qq.com\n@file: \n@description: \n&#39;&#39;&#39;\nfrom PyQt5.QtCore import Qt\nfrom PyQt5.QtGui import QPixmap, QPainter, QPainterPath, QPen\nfrom PyQt5.QtWidgets import QLabel, QWidget, QHBoxLayout\n\n\n__Author__ = &quot;By: Irony.\\&quot;[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com&quot;\n__Copyright__ = &quot;Copyright (c) 2017 Irony.\\&quot;[讽刺]&quot;\n__Version__ = &quot;Version 1.0&quot;\n\n\nclass Label(QLabel):\n\n    def __init__(self, *args, antialiasing=True, **kwargs):\n        super(Label, self).__init__(*args, **kwargs)\n        self.Antialiasing = antialiasing\n        self.setMaximumSize(200, 200)\n        self.setMinimumSize(200, 200)\n        self.radius = 100\n\n        #####################核心实现#########################\n        self.target = QPixmap(self.size())  # 大小和控件一样\n        self.target.fill(Qt.transparent)  # 填充背景为透明\n\n        p = QPixmap(&quot;head.jpg&quot;).scaled(  # 加载图片并缩放和控件一样大\n            200, 200, Qt.KeepAspectRatioByExpanding, Qt.SmoothTransformation)\n\n        painter = QPainter(self.target)\n        if self.Antialiasing:\n            # 抗锯齿\n            painter.setRenderHint(QPainter.Antialiasing, True)\n            painter.setRenderHint(QPainter.HighQualityAntialiasing, True)\n            painter.setRenderHint(QPainter.SmoothPixmapTransform, True)\n\n#         painter.setPen(# 测试黑色圆圈\n#             QPen(Qt.black, 5, Qt.SolidLine, Qt.RoundCap, Qt.RoundJoin))\n        path = QPainterPath()\n        path.addRoundedRect(\n            0, 0, self.width(), self.height(), self.radius, self.radius)\n        #**** 切割为圆形 ****#\n        painter.setClipPath(path)\n#         painter.drawPath(path)  # 测试黑色圆圈\n\n        painter.drawPixmap(0, 0, p)\n        self.setPixmap(self.target)\n        #####################核心实现#########################\n\nclass Window(QWidget):\n\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        layout.addWidget(Label(self))\n        layout.addWidget(Label(self, antialiasing=False))\n        self.setStyleSheet(&quot;background: black;&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    import sys\n    from PyQt5.QtWidgets import QApplication\n    app = QApplication(sys.argv)\n    w = Window()\n    w.show()\n    sys.exit(app.exec_())\n</code></pre>\n","raw":"---\nauthor: Irony\ntitle: PyQt5圆形图片\ndate: 2018-09-25 22:13:26\ntop: 1\ntags: \n - PyQt\n - 圆形\n - 图片\ncategories: 例子\n---\n\n实现圆形图片的方法有很多，比如用遮罩（mask）,裁切等等。这里比较几种实现方式，选出个人认为最优的方案。\n<!-- more -->\n\nhttps://github.com/PyQt5/PyQt/blob/master/QLabel/CircleImage.py\n\n## 采用mask方式\n\n具体参考 [【Qt】QLabel实现的圆形图像 - 米罗西 - 博客园](https://www.cnblogs.com/zhehan54/p/9515124.html)\n\n## 画圆形遮盖（适合纯色背景）\n\n原理是在原图片上画一个4角有颜色，中间圆形镂空的图片。\n\n![circleimage1](/images/circleimage1.png)\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n'''\nCreated on 2017年8月25日\n@author: Irony.\"[讽刺]\n@site: https://pyqt5.com, https://github.com/892768447\n@email: 892768447@qq.com\n@description: \n'''\nfrom PyQt5.QtCore import Qt\nfrom PyQt5.QtGui import QPixmap, QPainter, QPainterPath\nfrom PyQt5.QtWidgets import QLabel, QWidget, QHBoxLayout\n\n\n__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\n\n\nclass Label(QLabel):\n\n    def __init__(self, *args, antialiasing=True, **kwargs):\n        super(Label, self).__init__(*args, **kwargs)\n        self.Antialiasing = antialiasing\n        self.setMaximumSize(200, 200)\n        self.setMinimumSize(200, 200)\n        self.radius = 100\n\n        #加载图片并缩放\n        self.image = QPixmap(\"head.jpg\").scaled(\n            200, 200, Qt.KeepAspectRatioByExpanding, Qt.SmoothTransformation)\n\n        painter = QPainter(self.image)\n        if self.Antialiasing:\n            painter.setRenderHint(QPainter.Antialiasing, True)\n            painter.setRenderHint(QPainter.HighQualityAntialiasing, True)\n            painter.setRenderHint(QPainter.SmoothPixmapTransform, True)\n\n        path = QPainterPath()\n        path.addRoundedRect(\n            0, 0, self.width(), self.height(), self.radius, self.radius)\n        path.addRect(0,0,self.width(),self.height())\n        painter.setPen(Qt.NoPen)\n        painter.setBrush(Qt.green)\n        painter.drawPath(path)\n        self.setPixmap(self.image)\n\n\nclass Window(QWidget):\n\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        layout.addWidget(Label(self))\n        layout.addWidget(Label(self, antialiasing=False))\n        self.setStyleSheet(\"background: black;\")\n\nif __name__ == \"__main__\":\n    import sys\n    from PyQt5.QtWidgets import QApplication\n    app = QApplication(sys.argv)\n    w = Window()\n    w.show()\n    sys.exit(app.exec_())\n```\n\n## 使用QPainter的setCompositionMode\n\n具体参考 [Qt 圆形头像制作工具 抗锯齿 可缩放编辑](https://qtdream.com/topic/911/qt-%E5%9C%86%E5%BD%A2%E5%A4%B4%E5%83%8F%E5%88%B6%E4%BD%9C%E5%B7%A5%E5%85%B7-%E6%8A%97%E9%94%AF%E9%BD%BF-%E5%8F%AF%E7%BC%A9%E6%94%BE%E7%BC%96%E8%BE%91)\n\n```c++\n//result_avatar_size 是我们最后生成的图片的长宽，可以是QSize(200, 200)的正圆\ndestination_image = QImage(result_avatar_size, QImage::Format_ARGB32_Premultiplied);\n//在黑色的正方形中间画一个透明的圆，作为头像遮罩\nQPainter painter(&destination_image);\npainter.setRenderHint(QPainter::Antialiasing);\n//全涂黑\npainter.fillRect(destination_image.rect(), QBrush(Qt::black, Qt::SolidPattern));\npainter.setCompositionMode(QPainter::CompositionMode_SourceOut);\npainter.setPen(Qt::NoPen);\npainter.setBrush(QBrush(Qt::transparent, Qt::SolidPattern));\n//画透明区域\npainter.drawEllipse(destination_image.rect());\n```\n\n## 使用QPainter的切割方法（推荐）\n\n利用`QPainter.setClipPath`方法切割一个圆形的`QPainterPath`\n\n![circleimage2](/images/circleimage2.png)\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n'''\nCreated on 2017年8月25日\n@author: Irony.\"[讽刺]\n@site: https://pyqt5.com, https://github.com/892768447\n@email: 892768447@qq.com\n@file: \n@description: \n'''\nfrom PyQt5.QtCore import Qt\nfrom PyQt5.QtGui import QPixmap, QPainter, QPainterPath, QPen\nfrom PyQt5.QtWidgets import QLabel, QWidget, QHBoxLayout\n\n\n__Author__ = \"By: Irony.\\\"[讽刺]\\nQQ: 892768447\\nEmail: 892768447@qq.com\"\n__Copyright__ = \"Copyright (c) 2017 Irony.\\\"[讽刺]\"\n__Version__ = \"Version 1.0\"\n\n\nclass Label(QLabel):\n\n    def __init__(self, *args, antialiasing=True, **kwargs):\n        super(Label, self).__init__(*args, **kwargs)\n        self.Antialiasing = antialiasing\n        self.setMaximumSize(200, 200)\n        self.setMinimumSize(200, 200)\n        self.radius = 100\n\n        #####################核心实现#########################\n        self.target = QPixmap(self.size())  # 大小和控件一样\n        self.target.fill(Qt.transparent)  # 填充背景为透明\n\n        p = QPixmap(\"head.jpg\").scaled(  # 加载图片并缩放和控件一样大\n            200, 200, Qt.KeepAspectRatioByExpanding, Qt.SmoothTransformation)\n\n        painter = QPainter(self.target)\n        if self.Antialiasing:\n            # 抗锯齿\n            painter.setRenderHint(QPainter.Antialiasing, True)\n            painter.setRenderHint(QPainter.HighQualityAntialiasing, True)\n            painter.setRenderHint(QPainter.SmoothPixmapTransform, True)\n\n#         painter.setPen(# 测试黑色圆圈\n#             QPen(Qt.black, 5, Qt.SolidLine, Qt.RoundCap, Qt.RoundJoin))\n        path = QPainterPath()\n        path.addRoundedRect(\n            0, 0, self.width(), self.height(), self.radius, self.radius)\n        #**** 切割为圆形 ****#\n        painter.setClipPath(path)\n#         painter.drawPath(path)  # 测试黑色圆圈\n\n        painter.drawPixmap(0, 0, p)\n        self.setPixmap(self.target)\n        #####################核心实现#########################\n\nclass Window(QWidget):\n\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QHBoxLayout(self)\n        layout.addWidget(Label(self))\n        layout.addWidget(Label(self, antialiasing=False))\n        self.setStyleSheet(\"background: black;\")\n\nif __name__ == \"__main__\":\n    import sys\n    from PyQt5.QtWidgets import QApplication\n    app = QApplication(sys.argv)\n    w = Window()\n    w.show()\n    sys.exit(app.exec_())\n```","categories":[{"name":"例子","path":"api/categories/例子.json"}],"tags":[{"name":"PyQt","path":"api/tags/PyQt.json"},{"name":"圆形","path":"api/tags/圆形.json"},{"name":"图片","path":"api/tags/图片.json"}]}